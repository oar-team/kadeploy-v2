#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;

my $kadeployconfdir="/etc/kadeploy";
my $deployconf=$kadeployconfdir."/deploy.conf";
my $deploycmdconf=$kadeployconfdir."/deploy_cmd.conf";
my @listfiletowrapuser=(
			"kaconsole",
			"kacreateenv",
			"kadeploy",
			"kaenvironments",
			"kareboot",
			"karecordenv",
			"mcat_rsh.pl",
			"mcat_ssh.pl",
			"sentinelle.pl",
			);			

my @listfiletowraproot=(
			"kaadduser",
			"kaaddnode",
			"kadatabase",
			"kadelnode",
			"kadeluser",
			"kasetup",
			"katftp",
			);

my $checkdeployconf;
my $checksudoers;
my $printvalidsudoers;
my $checkwriteaccess;
my $checkbinfiles;
my $help;
my $sudowrapping;
my $copybinfiles;



sub help();
sub check_etc_deploy();
sub checksudoers();
sub checkdeployconf();
sub checkwriteaccess();
sub checkbinfiles();
sub sudowrapping();
sub copybinfiles();
sub printvalidsudoers();


GetOptions('checkdeployconf!'    => \$checkdeployconf,
           'checksudoers!'       => \$checksudoers,
	   'printvalidsudoers!'  => \$printvalidsudoers,
	   'checkwriteaccess!'   => \$checkwriteaccess,
	   'checkbinfiles!'      => \$checkbinfiles,
	   'copybinfiles!'       => \$copybinfiles,
	   'sudowrapping'        => \$sudowrapping,
	   'h!'                  => \$help,
	   );
if ($help)
{
    help();
    exit(0);
}

if ($checkdeployconf   ||
    $checksudoers      || 
    $printvalidsudoers ||
    $checkwriteaccess  ||
    $checkbinfiles     ||
    $copybinfiles      ||
    $sudowrapping      )
{


    if (!check_etc_deploy()) { print "there is problem with /etc/kadeploy\n"; exit 1; }
    
    use libkadeploy2::conflib;
    if ($checkdeployconf)  { if (!checkdeployconf()) { print "Failed\n"; exit 1; } else { print "OK\n";} }
    if ($checksudoers)     { if (!checksudoers())    {    print "Failed\n"; exit 1; } else { print "OK\n";}  }
    if ($checkbinfiles)    { if (checkdeployconf())  { checkbinfiles(); } }
    if ($copybinfiles)     { if (check_etc_deploy() && checkdeployconf())  { copybinfiles(); } }
    if ($sudowrapping)     { if (checkdeployconf() && checkbinfiles() )  { sudowrapping(); } }
    if ($printvalidsudoers){ if (checkdeployconf()) { printvalidsudoers(); } }
    
    exit 0;
}
else
{
    help();
    exit 1;
    
}

################################################################################

sub printvalidsudoers()
{
    my $kadeploydir=libkadeploy2::conflib::get_conf("kadeploy2_directory");
    my $kadeployuser=libkadeploy2::conflib::get_conf("deploy_user");
    my $tmpcmd;
    my $i;
    print "
Cmnd_Alias DEPLOYCMDUSER = ";
    for ($i=0; $i<=$#listfiletowrapuser; $i++)
    {
	print "$kadeploydir/bin/$listfiletowrapuser[$i]";
	if ($i!=$#listfiletowrapuser) { print ", "; }
    }    
    print "\n";


    print "
Cmnd_Alias DEPLOYCMDROOT = ";
    for ($i=0; $i<=$#listfiletowraproot; $i++)
    {
	print "$kadeploydir/bin/$listfiletowraproot[$i]";
	if ($i!=$#listfiletowraproot) { print ", "; }
    }    
    print "\n";

    print "
$kadeployuser  ALL=(ALL) NOPASSWD: DEPLOYCMDUSER
ALL ALL=($kadeployuser) NOPASSWD: DEPLOYCMDUSER
\n";

}

sub check_etc_deploy()
{
    my $ok=1;

    if (! -d $kadeployconfdir)
    {
	print "kadeploy configuration directory $kadeployconfdir is not created\n";
	$ok=0;
    }
    if ( ! -e $deployconf)
    {
	print "$deployconf not found\n";
	$ok=0;
    }
    if ( ! -e $deploycmdconf)
    {
	print "$deploycmdconf not found\n";
	$ok=0;
    }
    return($ok);
}

sub checkbinfiles()
{
     my $file;
     my $command;
     my $ret=1;
     my @filetocheck=("DKsentinelle",
		      "mcatseg");
     foreach $file (@filetocheck)
     {
	 $command="ls /usr/local/bin/$file";
	 if (system($command)!=0)
	 {
	     $ret=0;
	 }
     }
     return $ret;
}

sub copybinfiles()
{
    my $kadeploy2_directory;
    my $file;
    my $command;
    $kadeploy2_directory=libkadeploy2::conflib::get_conf("kadeploy2_directory");

    my @filetocopy=("DKsentinelle",
		    "mcatseg");
    foreach $file (@filetocopy)
    {
	$command="cp $kadeploy2_directory/bin/$file /usr/local/bin";
	print "Exec : $command\n";
	system($command);
    }
}


sub sudowrapping()
{
    
    my $kadeploy2_directory;
    my $file;
    my $command;
    $kadeploy2_directory=libkadeploy2::conflib::get_conf("kadeploy2_directory");
    foreach $file (@listfiletowrapuser)
    {
	$command="ln -s $kadeploy2_directory/bin/kasudowrapper.sh /usr/local/bin/$file";
	print "Exec : $command\n";
	system($command);

    }
}


sub checkDKsentinelle()
{
    my $DK="/usr/local/bin/DKsentinelle";    
    my $line;
    my $ok;
    #CHECK DKsentinelle 
    if ( -x "$DK" &&
	 ( ! -l "$DK") && 
	 open(FH,"$DK -h 2>&1|") )
    {
	while ($line=<FH>) { }
	close(FH);
	print "* DKsentinelle was found\n";
    }
    else
    {
	print "* You have to copy DKsentinelle to $DK... And check if it works.\n";
	$ok=0;
    }
    return $ok; 
}


sub checkdeployconf()
{
    my $kadeploy2_directory;
    my $tftpdir;
    my $pxe_rep;
    my $deploy_user;
    my $userok=0;
    my $ok=1;
    my $line;
    my $remotesentinelle;
    my $remotemcat;
    my $deploy_sentinelle_cmd;
    my $prod_sentinelle_cmd;
    my $DK="/usr/local/bin/DKsentinelle";    
    my $RMC="/usr/local/bin/mcatseg";
    my $pre_install_archive;
    my $post_install_archive;
    my $tftp_relative_path;
    my $user;

    $kadeploy2_directory=libkadeploy2::conflib::get_conf("kadeploy2_directory");
    $deploy_user=libkadeploy2::conflib::get_conf("deploy_user");
    $tftpdir=libkadeploy2::conflib::get_conf("tftp_repository");
    $pxe_rep=libkadeploy2::conflib::get_conf("pxe_rep");
    $remotesentinelle=libkadeploy2::conflib::get_conf("remote_sentinelle_rsh");
    $remotemcat=libkadeploy2::conflib::get_conf("remote_mcat");
    $deploy_sentinelle_cmd=libkadeploy2::conflib::get_conf("deploy_sentinelle_cmd");
    $prod_sentinelle_cmd=libkadeploy2::conflib::get_conf("prod_sentinelle_cmd");
    $pre_install_archive=libkadeploy2::conflib::get_conf("pre_install_archive");
    $post_install_archive=libkadeploy2::conflib::get_conf("post_install_archive");
    $tftp_relative_path=libkadeploy2::conflib::get_conf("tftp_relative_path");
    $user=$ENV{USER};

    #CHECK KADEPLOY DIR
    if (! -d $kadeploy2_directory)
    {
	print "* kadeploy directory $kadeploy2_directory not found.\n";
	$ok=0;	
    }
    else
    {
	print "* kadeploy directory $kadeploy2_directory exist.\n";
    }

    #CHECK USER
    if (open(FH,"getent passwd | grep $deploy_user |"))
    {
	while ($line=<FH>)
	{
	    if ($line=~/^$deploy_user/)
	    {
		$userok=1;
	    }
	}
	close(FH);
	if ($userok) { 	print "* $deploy_user user exist.\n"; }
    }
    else
    {
	print "* $deploy_user user don't exist.\n";	
	$ok=0;
	return $ok;
    }

    if (!($user eq $deploy_user))
    {
	print "* WARNING you have to be $deploy_user user !!!\n";
    }
    else
    {
	print "* You are $deploy_user user.\n";
    }


    #CHECK TFTP
    if (! -d  $tftpdir)
    {
	print "* tftp directory $tftpdir not found\n";
	$ok=0;
    }
    else
    {
	print "* tftp directory $tftpdir exist.\n";       
    }
    #CHECK TFTP PXE
    if (! -d $tftpdir.$pxe_rep)
    {
	print "* pxe directory ".$tftpdir.$pxe_rep." not found.\n";
	$ok=0;
    }
    else
    {
	print "* pxe directory ".$tftpdir.$pxe_rep. " exist.\n";
    }
    #CHECK TFTP PXE WRITE ACCESS
    if (! -w $tftpdir.$pxe_rep)
    {
	print "* pxe directory ".$tftpdir.$pxe_rep." not writable.\n";
	$ok=0;
    }
    else
    {
	print "* pxe directory ".$tftpdir.$pxe_rep. " writable.\n";
    }

    #CHECK TFTP PXE BOOT
    if (! -d $tftpdir.$tftp_relative_path)
    {
	print "* tftp relative path ".$tftpdir.$tftp_relative_path." not found.\n";
	$ok=0;
    }
    else
    {
	print "* tftp relative path ".$tftpdir.$tftp_relative_path. " exist.\n";
    }
    if (! -w $tftpdir.$tftp_relative_path)
    {
	print "* tftp relative path ".$tftpdir.$tftp_relative_path." not writable.\n";
	$ok=0;
    }
    else
    {
	print "* tftp relative path ".$tftpdir.$tftp_relative_path. " writable.\n";
    }


    
    if ($remotesentinelle eq $DK)
    {
	print "* remote_sentinelle_rsh is correct.\n";
    }
    else
    {
	print "* remote_sentinelle_rsh must be $DK.\n";
	$ok=0;
	return $ok;
    }

    if ($deploy_sentinelle_cmd eq $DK)
    {
	print "* deploy_sentinelle_cmd is correct.\n";
    }
    else
    {
	print "* deploy_sentinelle_cmd is not correct, set it to $DK.\n";
	$ok=0;
	return $ok;
    }

    if ($prod_sentinelle_cmd eq $DK)
    {
	print "* prod_sentinelle_cmd is correct.\n";
    }
    else
    {
	print "* prod_sentinelle_cmd is not correct, set it to $DK.\n";
	$ok=0;
	return $ok;
    }


    #CHECK MCAT
    if ($remotemcat eq $RMC)
    {
	print "* remote_mcat is correct.\n";
    }
    else
    {
	print "* remote_mcat must be $RMC.\n";
	$ok=0;
	return $ok;
    }
    
    #CHECK PREINSTALL
    if (-e $pre_install_archive)
    {
	print "* pre_install_archive exist.\n";
    }
    else
    {
	print "* You have to correct your pre_install_archive path.\n";
	$ok=0;
	return $ok;
    }

    #CHECK POSTINSTALL
    if (-e $post_install_archive)
    {
	print "* post_install_archive exist.\n";
    }
    else
    {
	print "* You have to correct your post_install_archive path.\n";
	$ok=0;	
	return $ok;
    }

    return $ok;
         
}


sub checksudoers()
{
    my $sudoers="/etc/sudoers";
    my $ok=1;

    if ( -e $sudoers)
    {
	print "* sudoers exist\n";
    }
    else
    {
	print "* sudoers was not found : $sudoers\n";
	$ok=0;
    }

    return $ok;
}

sub checkwriteaccess()
{
    my $tftp_repository;
    my $pxe_rep;
    $tftp_repository=libkadeploy2::conflib::get_conf("tftp_repository");
    $pxe_rep=libkadeploy2::conflib::get_conf("pxe_rep");
}

sub help()
{
	print "$0
\t-checkdeployconf               check $deployconf
\t-checksudoers                  print a valid sudoers
\t-printvalidsudoers             generate a sudoers from deploy.conf
\t-sudowrapping                  wrap files with kasudowrapper.sh
\t-copybinfiles                  copy required files in /usr/local/bin
";
}

