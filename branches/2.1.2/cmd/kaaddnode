#!/usr/bin/perl

# TODO add a function that checks file syntax

use Getopt::Long;
use libkadeploy2::deploy_iolib;
use libkadeploy2::conflib;
 
use libkadeploy2::node_bd;
use libkadeploy2::nodes;
use strict;

sub loadnodesfile($);
sub loadpartitionfile($);
sub updatedeployedtable();

my $nodesfile="/etc/kadeploy/clusternodes.conf";
my $nodespartitionfile="/etc/kadeploy/cluserpartition.conf";



my $disk_id;
my @host_id_list = ();
my @part_env_id_list = ();
my $ok=1;

print "\n";


print "Checking $nodesfile\n";
if (!loadnodesfile($nodesfile)) { print "Error loading $nodesfile\n"; $ok=0; }
print "\n";

print "Checking $nodespartitionfile\n";
if (!loadpartitionfile($nodespartitionfile)) { print "Error loading $nodespartitionfile\n"; $ok=0; }
print "\n";

if ($ok)
{
    updatedeployedtable(); 
    print "Now you have to kasetup -buildpreinstall\n";
    exit 0;
}
else
{
    print "Check your configuration files...\n";
    exit 1;
}

################################################################################

sub loadnodesfile($)
{
    my $file = shift;
    open(DESC,$file);    
    my $base = libkadeploy2::deploy_iolib::connect();
    open(DESC,$file);
    foreach my $line (<DESC>)
    {
	# checks if it is a commentary
	chomp($line);
	if($line)
	{
	    #check line 
	    #node1 11:22:33:44:55:66 192.168.0.1
	    if($line =~ /^([a-z0-9]+) (..:..:..:..:..:..) ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*$/)
	       {
		   # nodes description
		   my ($name,$ether,$ip)=($1,$2,$3);
		   my @info = ($name,$ether,$ip);
		   my $node_id = libkadeploy2::deploy_iolib::add_node($base,\@info);
		   push(@host_id_list, $node_id);
		   print "Registring $name\n";
	       }	       
	}	    
    }   

    close(DESC);
    libkadeploy2::deploy_iolib::disconnect($base);    
    print "Nodes Registration completed.\n";    
}

sub loadpartitionfile($)
		      {
    my $file = shift;
    open(DESC,$file);
    my $base = libkadeploy2::deploy_iolib::connect();
    foreach my $line (<DESC>)
    {
	# checks if it is a commentary
	chomp($line);
	if($line)
	{
	    #check line
	    #hda 8000
	    if($line =~ /^(hd[a-z]) ([0-9]+)$/)
	    {		
		# disk description
		my ($harddisk,$sizeMB);
		($harddisk,$sizeMB)=($1,$2);
		my @info = ($harddisk,$sizeMB);
		$disk_id = libkadeploy2::deploy_iolib::add_disk($base,\@info);
	    }
	    #check line
	    #1 500 swap
	    if ($line =~ /^([0-9]+) ([0-9]+) ([a-zA-Z]+)$/)
	    {
		my ($id,$sizeMB,$label);		
		($id,$sizeMB,$label)=($1,$2,$3);

		# partition description		
		my @info = ($id,$sizeMB,$label);
		my $part_id = libkadeploy2::deploy_iolib::add_partition($base,\@info,$disk_id);
		my $env_id = libkadeploy2::deploy_iolib::env_name_to_last_ver_id($base,$info[2]);
		if(!$env_id)
		{
		    my $part_nb = libkadeploy2::deploy_iolib::part_id_to_nb($base,$part_id);
		    print "WARNING : special 'undefined' environment will be affected to partition number $part_nb\n";
		    $env_id = libkadeploy2::deploy_iolib::env_undefined_to_id($base);
		}
		push(@part_env_id_list, [$part_id,$env_id]);
		print "Registring $label\n";
	    }
	}
    }    
    close(DESC);    
    libkadeploy2::deploy_iolib::disconnect($base);    
    print "Registration completed.\n";    
}


sub updatedeployedtable()
{
    my $base = libkadeploy2::deploy_iolib::connect();
    foreach my $host (@host_id_list)
    {
	foreach my $part_env (@part_env_id_list)
	{
	    libkadeploy2::deploy_iolib::add_deploy($base,\$part_env,$disk_id,$host);
	  }
    }
    
    libkadeploy2::deploy_iolib::disconnect($base);    
}
