#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long;
use libkadeploy2::deployconf;
use libkadeploy2::script;
use libkadeploy2::command;
use libkadeploy2::nodelist;
use libkadeploy2::device;
use libkadeploy2::remoteparallelcommand;
use libkadeploy2::disk;
use libkadeploy2::disks;
use libkadeploy2::environment;


sub execcmd($$);

my $message=libkadeploy2::message::new();
my $conf=libkadeploy2::deployconf::new();
if (! $conf->loadcheck()) { exit 1; }

my $kadeploydir=$conf->get("kadeploy2_directory");
my $kamcat=$conf->getpath_cmd("kamcat");
my $kapart=$conf->getpath_cmd("kapart");
my $kapxe=$conf->getpath_cmd("kapxe");
my $kareboot=$conf->getpath_cmd("kareboot");
my $postinstallscript=$conf->get("post_install_script");


my $device;
my $linuxdev;
my $remoteparallelcommand;
my $timeout=30;
my $connector="ssh";
my $parallellauncher="internal";


my @node_list;
my $disknumber;
my $partnumber;
my $disktype;
my $help=0;
my $verbose=0;
my $nodelist;
my $command;
my $basefile;
my $postinstall;
my $cmd;
my $ref_node_list;
my $node;
my $nodename;
my $disk;
my $i;
my $taropts;
my $environment;
my $envfile;
my $disks;

GetOptions(
	   'm=s'                  => \@node_list,
	   'machine=s'            => \@node_list,

	   'envfile=s'            => \$envfile,
	   
	   'disknumber=s'         => \$disknumber,
	   'partnumber=s'         => \$partnumber,

	   'timeout=s'            => \$timeout,

	   'connector=s'          => \$connector,	   

	   'h!'                   => \$help,
	   'help!'                => \$help,
	   'v!'                   => \$verbose,
	   'verbose!'             => \$verbose,
	   );

if (! $envfile)          { $message->missing_cmdline(2,"envfile");   exit 1; }

if (@node_list)     { $nodelist=libkadeploy2::nodelist::new(); $nodelist->loadlist(\@node_list);  }
else { $message->missing_node_cmdline(2); exit 1; }

$environment=libkadeploy2::environment::new();
$environment->set_descriptionfile($envfile);
$environment->load();
$basefile=$environment->get_info("basefile");
$postinstall=$environment->get_info("postinstall");

if (! $disknumber)       { $message->missing_cmdline(2,"disknumber"); exit 1; }
if (! $partnumber)       { $message->missing_cmdline(2,"partnumber"); exit 1; }
if (! -f $basefile)      { $message->filenotfound(2,$basefile);       exit 1; }
if (! -f $postinstall)   { $message->filenotfound(2,$postinstall);    exit 1; }


$disks=libkadeploy2::disks::new($nodelist);
if (! $disks->check_disk_type($disknumber)) { exit 1; }

$disktype=$disks->get_disk_type($disknumber);

$device=libkadeploy2::device::new("$disktype",$disknumber,$partnumber);
$linuxdev=$device->get_linux();



$message->message(0,"Deploying linux on disk:$disknumber partition:$partnumber interface:$disktype ".$nodelist->get_str());


$cmd="umount /dev/$linuxdev";
execcmd($cmd,30);

$cmd="umount /mnt/dest";
execcmd($cmd,30);

$message->message(-1,"Mounting /dev/$linuxdev on /mnt/dest");

$cmd="mkdir -p /mnt/dest";
if (! execcmd($cmd,10)) { $message->message(2,"Failed on $cmd"); exit 1; }

$cmd="mkfs /dev/$linuxdev";
if (! execcmd($cmd,30)) { $message->message(2,"Failed on $cmd"); exit 1; }

$cmd="mount /dev/$linuxdev /mnt/dest";
if (! execcmd($cmd,10)) { $message->message(2,"Failed on $cmd"); exit 1; }


$message->message(-1,"Transfering image");
if     ($basefile =~ /tgz$/)      { $taropts = "xzf"; }
elsif  ($basefile =~ /tar$/)      { $taropts = "xf"; }
elsif  ($basefile =~ /tar\.gz$/)  { $taropts = "xzf"; }
elsif  ($basefile =~ /tar\.bz2$/) { $taropts = "xjf"; }
else   { exit 1; }


$cmd="$kamcat -v -l root --servercommand \"cat $basefile\" --clientcommand \"cd /mnt/dest ; tar $taropts -\" ".$nodelist->get_cmdline;
$command=libkadeploy2::command::new($cmd,
				    600,
				    $verbose
				    );
if (! $command->exec()) { $message->message(2,"Failed on $cmd"); exit 1; }

$message->message(-1,"Transfering postinstall");
if     ($postinstall =~ /tgz$/)      { $taropts = "xzf"; }
elsif  ($postinstall =~ /tar$/)      { $taropts = "xf"; }
elsif  ($postinstall =~ /tar\.gz$/)  { $taropts = "xzf"; }
elsif  ($postinstall =~ /tar\.bz2$/) { $taropts = "xjf"; }
else   { exit 1; }

$cmd="$kamcat -v -l root --servercommand \"cat $postinstall\" --clientcommand \"cd /tmp ; tar $taropts -\" ".$nodelist->get_cmdline;
$command=libkadeploy2::command::new($cmd,
				    100,
				    $verbose
				    );
if (! $command->exec()) { $message->message(2,"Failed on $cmd");  exit 1; }

$message->message(-1,"launching postinstall");
$cmd="/tmp/$postinstallscript ";
if (! execcmd($cmd,10)) { $message->message(2,"Failed on $cmd"); exit 1; }

$message->message(-1,"Unmounting /dev/$linuxdev on /mnt/dest");
$cmd="umount /dev/$linuxdev";
if (! execcmd($cmd,200)) { $message->message(2,"Failed on $cmd"); exit 1; }
$message->message(-1,"Finished");

################################################################################
								
sub execcmd($$)
{
    my $cmd=shift;
    my $timeout=shift;
    $remoteparallelcommand=libkadeploy2::remoteparallelcommand::new(
								    $connector,
								    $parallellauncher,
								    "root",
								    $nodelist,
								    $cmd,
								    $timeout,
								    $verbose
								    );

if (! $remoteparallelcommand->exec()) { return 0; } else { return 1;}
}
