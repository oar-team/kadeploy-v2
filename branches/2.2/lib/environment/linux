#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long;
use libkadeploy2::deployconf;
use libkadeploy2::script;
use libkadeploy2::command;
use libkadeploy2::nodelist;
use libkadeploy2::device;
use libkadeploy2::remoteparallelcommand;
use libkadeploy2::disk;

sub execcmd($);

my $message=libkadeploy2::message::new();
my $conf=libkadeploy2::deployconf::new();
if (! $conf->loadcheck()) { exit 1; }

my $kadeploydir=$conf->get("kadeploy2_directory");
my $kamcat=$conf->getpath_kamcat();
my $kapart=$conf->getpath_kapart();
my $kapxe=$conf->getpath_kapxe();
my $kareboot=$conf->getpath_kareboot();



my $device;
my $linuxdev;
my $remoteparallelcommand;
my $timeout=30;
my $connector="ssh";
my $parallellauncher="internal";


my @node_list;
my $partitionfile;
my $disknumber;
my $partnumber;
my $disktype;
my $help=0;
my $verbose=0;
my $nodelist;
my $command;
my $basefile;
my $postinstall;
my $cmd;
my $ref_node_list;
my $node;
my $nodename;
my $disk;
my $i;
my $taropts;

GetOptions(
	   'm=s'                  => \@node_list,
	   'machine=s'            => \@node_list,

	   'partitionfile=s'      => \$partitionfile,
	   
	   'basefile=s'           => \$basefile,
	   'postinstall=s'        => \$postinstall,
	   
	   'disknumber=s'         => \$disknumber,
	   'partnumber=s'         => \$partnumber,

	   'timeout=s'            => \$timeout,

	   'connector=s'          => \$connector,	   

	   'h!'                   => \$help,
	   'help!'                => \$help,
	   'v!'                   => \$verbose,
	   'verbose!'             => \$verbose,
	   );

if (@node_list)
{
    $nodelist=libkadeploy2::nodelist::new();
    $nodelist->loadlist(\@node_list);
}
else
{
    $message->missing_node_cmdline(2);
    exit 1;
}

if (! $disknumber)       { $message->missing_cmdline(2,"disknumber"); exit 1; }
if (! $partnumber)       { $message->missing_cmdline(2,"partnumber"); exit 1; }
if (! $basefile)         { $message->missing_cmdline(2,"basefile");   exit 1; }
if (! -f $basefile)      { $message->filenotfound(2,$basefile);       exit 1; }
if (! -f $postinstall)   { $message->filenotfound(2,$postinstall);    exit 1; }


$ref_node_list=$nodelist->get_nodes();
@node_list=@$ref_node_list;

$i=0;
foreach $node (@node_list)
{
    $nodename=$node->get_name();
    $disk=libkadeploy2::disk::new();
    $disk->get_fromdb($nodename,$disknumber);
    if ($i==0)
    {
	$disktype=$disk->get_interface();
    }
    else
    {
	if ($disktype eq $disk->get_interface())
	{ print "OK";} else { print "BAD\n"; exit 1; }
    }
}

$device=libkadeploy2::device::new("$disktype",$disknumber,$partnumber);
$linuxdev=$device->get_linux();



print("Deploying linux on disk=$disknumber partition=$partnumber interface=$disktype\n");


$cmd="umount /dev/$linuxdev";
execcmd($cmd);

$cmd="mkdir -p /mnt/dest";
if (! execcmd($cmd)) { exit 1; }

$cmd="mkfs /dev/$linuxdev";
if (! execcmd($cmd)) { exit 1; }

$cmd="mount /dev/$linuxdev /mnt/dest";
if (! execcmd($cmd)) { exit 1; }


print("Transfering image\n");
if     ($basefile =~ /tgz$/)      { $taropts = "xzf"; }
elsif  ($basefile =~ /tar$/)      { $taropts = "xf"; }
elsif  ($basefile =~ /tar\.gz$/)  { $taropts = "xzf"; }
elsif  ($basefile =~ /tar\.bz2$/) { $taropts = "xjf"; }
else   { exit 1; }


$cmd="$kamcat -v -l root --servercommand \"cat $basefile\" --clientcommand \"cd /mnt/dest ; tar $taropts -\" ".$nodelist->get_cmdline;
$command=libkadeploy2::command::new($cmd,
				    600,
				    $verbose
				    );
if (! $command->exec()) { exit 1; }

print("Transfering postinstall\n");
if     ($postinstall =~ /tgz$/)      { $taropts = "xzf"; }
elsif  ($postinstall =~ /tar$/)      { $taropts = "xf"; }
elsif  ($postinstall =~ /tar\.gz$/)  { $taropts = "xzf"; }
elsif  ($postinstall =~ /tar\.bz2$/) { $taropts = "xjf"; }
else   { exit 1; }

$cmd="$kamcat -v -l root --servercommand \"cat $postinstall\" --clientcommand \"cd /tmp ; tar $taropts -\" ".$nodelist->get_cmdline;
$command=libkadeploy2::command::new($cmd,
				    600,
				    $verbose
				    );
if (! $command->exec()) { exit 1; }

print("launching postinstall\n");
$cmd="/tmp/postinstall.sh ";
if (! execcmd($cmd)) { exit 1; }


$cmd="umount /dev/$linuxdev";
if (! execcmd($cmd)) { exit 1; }
print "Finished\n";

################################################################################
								
sub execcmd($)
{
    my $cmd=shift;
    $remoteparallelcommand=libkadeploy2::remoteparallelcommand::new(
								    $connector,
								    $parallellauncher,
								    "root",
								    $nodelist,
								    $cmd,
								    $timeout,
								    $verbose
								    );

if (! $remoteparallelcommand->exec()) { return 0; } else { return 1;}
}
