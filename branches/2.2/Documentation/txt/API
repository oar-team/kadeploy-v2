################################################################################
#                                KADEPLOY REFERENCE MANUAL 2.2                 #
################################################################################


1) Commande utilisateur
2) Commande administrateur
3) Structuration des fichiers
4) Structuration de la BD
5) API v2.2
5.1) command.pm
5.2) script.pm
5.3) remotecommand.pm
5.4) remoteparallelcommand.pm
5.5) remoteparallelscript.pm
5.6) node.pm
5.7) nodelist.pm
5.8) disk.pm
6) API v2.1.2
6.1) conflib.pm
6.2) nodes.pm
6.3) bootlib.pm 
6.4) rights_iolib.pm

1) Commande utilisateur
-----------------------


kadeploy 
        -m nodename  
        -f nodefile
        -e environment_name
        -p partitionnumber
        -l username
        -h                            help message

kareboot
       -m nodename
       -f nodefile                    
       -s                             softboot
       -h                             hardboot
       -p partitionnumber             
       -d disknumber                  
       

kapxe  
      -m nodename
      -f nodefile
      -e environment_name
      -l username
      

                                            
2) Commande administrateur
--------------------------

kasetup -checkdeployconf               check /etc/kadeploy/deploy.conf
        -checksudoers                  check sudoers
        -sudowrapping                  wrap files with kasudowrapper.sh
        -printsudoers                  generate a sudoers from deploy.conf
        -createtftp                    copy all the files required for tftp boot
        -chmodconf                     put correct write on configuration files


kanodes
        -add                           add nodes 
        -del                           delete nodes
        -m host                        nodes
        -listnode                      list node from db
        -listpartition                 list partition from specified node
        -h                             this help

karights 
        -add                           add a specified right
        -del                           del a specified right
        -list                          list right from login or node
        -r rights                      right
        -l user                        user
        -m host                        host

kadatabase
        -addmysqlrights               create the "deploy" user for the db
        -delmysqlrights               delete this user from the db

        -create_db_deploy             create database
        -create_table_deploy          create table
        -drop_db_deploy               drop database
        -clean_db_deploy              clean deployed and deployement table

        -patch21                      patch db 2.0  -> 2.1
        -patch211                     patch db 2.1  -> 2.1.1
        -patch22                      patch db 2.11 -> 2.2
              
        -h                            print this message


kacheck
        -add                          add a check on specified node
        -del                          del a check on specified node
        -list                         list check on specified node
        -status                       stat the last check on specified node
        -m host                       node
        -type [rsh|ssh|tcp]           check type
        -p port                       port to check
        -t interval                   interval time

kastats
        ???






3)Structuration des fichiers
----------------------------

 1-a)/etc/kadeploy
 -----------------

  v2.1.2
  ------
  

deploy.conf            => fichier de configuration maitre de kadeploy
deploy_cmd.conf        => fichier d'execution de commande pour les noeuds 
clusternodes.conf      => fichier de noeuds 
clusterpartition.conf  => fichier de partition du cluster 

  v2.2
  ----


   Ce sont l'ensemble des fichiers décrivant les noeuds (nodes/name/)
et leurs manipulation (/nodes/name/cmd/)

nodes/name/net          => fichier du noeud
nodes/name/disk1        => fichier de description du partitionement du disque 1 du noeud "name"

nodes/name/cmd          => Repertoire de commande associé au noeud "name"
nodes/name/cmd/softboot => script de reboot soft 
nodes/name/cmd/hardboot => script de reboot hard 
nodes/name/cmd/console  => accés console du noeud 
nodes/name/cmd/XXX      => commande XXX 



  B) Classes d'environments
  -------------------------

   Les classes d'environments sont prévu pour : 
-isoler la mise en place d'un environment vis à vis du code de kadeploy
-chainer une suite environments

environment/linuxdeploy                => Classe d'environment "linuxdeploy" (environment de déploiement)
environment/linuxdeploy/01-pxe         => mise en place du pxe 
environment/linuxdeploy/02-reboot-node => reboot pour être dans l'environment linuxdeploy

environment/dd                         => Classe d'environment "dd"
environment/dd/00-check                => check de verification de l'état cohérent des noeuds
environment/dd/01-preinstall           => envoie de la preinstall et execution
environment/dd/02-dd-mcat              => envoie de l'environment
environment/dd/DEPEND                  => Classe d'environment à executé si le check ne fonctionne pas


environment/linux                      => Classe d'environment "linux"
environment/linux/00-check             => verification de l'état désiré
environment/linux/01-setupnode         => création des repertoires necessaire + montage du système de fichier cible
environment/linux/02-preinstall        => envoie de la preinstall + execution
environment/linux/03-environment       => envoie de l'environment
environment/linux/04-postinstall       => envoie de la postinstall + execution
environment/linux/05-setupfinished     => démontage du système de fichier + reboot
environment/linux/06-pxe               => mise en place du pxe
environment/linux/DEPEND               => Classe d'environment à executé si le check ne fonctionne pas

   Exemple:
   --------

environment/slackware                  => Classe d'environment "slackware"
environment/linux/00-check             => verification de l'état désiré
environment/linux/DEPEND               => Dépendance à l'environment linux

environment/freebsd                    => Classe d'environment "freebsd"
environment/freebsd/00-check           => verification de l'état désiré
environment/freebsd/DEPEND             => Dépendance à l'environment "dd" ou freebsddeploy



 1-b)/var/lib/tftpboot
 ---------------------

  v2.1.2
  ------

pxelinux.0                             => bootpxe pour linux (syslinux)
pxelinux.cfg                           => répertoire des configuration de boot des noeuds
pxelinux.cfg/C0A1B201                  => fichier de configuration d'un noeud
boot/memdisk                           => mini kernel memdisk (syslinux)
boot/duke-vmlinuz                      => kernel linux de déploiement
boot/duke-initrd                       => initrd linux de déploiement
boot/grub_img_envX_hdaY                => disquette grub de boot de l'env id X sur partition Y

  v2.2
  ----

nodes/name/pxeloader                   => pxe loader du noeud "name", nom fixe arbitraire
nodes/name/*                           => fichier de boot relatif à ce noeuds









4)Structuration de la BD
------------------------
  v2.2
  ----

Voici la structuration de la base de donnée.

show tables;
+----------------------+
| Tables_in_deploy     |
+----------------------+
| deployed             |
| deployment           |
| disk                 |
| environment          |
| node                 |
| partition            |
| rights               |
| site                 |
+----------------------+

select * from node;
+----+--------------------+-------------------+-------------+
| id | name               | macaddr           | ipaddr      |
+----+--------------------+-------------------+-------------+
|  1 | cls1.mycluster.net | 00:01:02:03:46:64 | 192.168.0.1 |
+----+--------------------+-------------------+-------------+

select * from disk;
+----+-------+--------+---------+-----------+
| id | size  | nodeid | dnumber | interface |
+----+-------+--------+---------+-----------+
|  1 | 80000 |      1 |       1 | ide       |
|  2 | 80000 |      1 |       2 | ide       |
+----+-------+--------+---------+-----------+

select * from partition;
+----+---------+-------+----------+--------+
| id | pnumber | size  | parttype | diskid |
+----+---------+-------+----------+--------+
|  1 |       1 |  2000 | primary  |      1 |
|  2 |       2 |  2000 | primary  |      1 |
|  3 |       3 |  2000 | primary  |      1 |
|  4 |       4 | 10000 | extended |      1 |
|  5 |       5 |  1000 | logical  |      1 |
|  6 |       6 |  1000 | logical  |      1 |
|  7 |       7 |  1000 | logical  |      1 |
|  8 |       1 |  2000 | primary  |      2 |
|  9 |       2 |  2000 | primary  |      2 |
| 10 |       3 |  2000 | primary  |      2 |
| 11 |       4 | 10000 | extended |      2 |
| 12 |       5 |  1000 | logical  |      2 |
| 13 |       6 |  1000 | logical  |      2 |
| 14 |       7 |  1000 | logical  |      2 |
+----+---------+-------+----------+--------+

select * from environment;
+----+-----------+---------+-----------------------+--------+----------+----------+------+------------+------------+-------------+-----------+------------+--------+------------+--------+-----------+-------------+
| id | name      | version | description           | author | filebase | filesite | size | initrdpath | kernelpath | kernelparam | fdisktype | filesystem | siteid | optsupport | user   | parttype  | depend      |
+----+-----------+---------+-----------------------+--------+----------+----------+------+------------+------------+-------------+-----------+------------+--------+------------+--------+-----------+-------------+
|  1 | undefined |       1 | undefined environment |        |          |          |    0 |            | 0          |             |        82 | undefined  |      0 |          0 | nobody | undefined |             |
|  2 | swap      |       1 | swap partition        |        |          |          |    0 |            | 0          |             |       130 | swap       |      0 |          0 | nobody | logical   | linuxdeploy |
|  3 | tmp       |       1 | tmp partition         |        |          |          |    0 |            | 0          |             |       131 | ext2       |      0 |          0 | nobody | logical   | linuxdeploy |
|  4 | debian    |       1 | debian                |        |          |          |  500 | /initrd    | /vmlinuz   |             |        83 | ext3       |      0 |          0 | yoyz   | primary   | linuxdeploy |
|  5 | freebsd   |       1 | freebsd               |        |          |          | 2000 |            | chainload  |             |        a5 | freebsd    |      0 |          0 | yoyz   | primary   | dd          |
+----+-----------+---------+-----------------------+--------+----------+----------+------+------------+------------+-------------+-----------+------------+--------+------------+--------+-----------+-------------+

select * from rights;
+----+-------+----------------+
| user | node  | rights       |
+------+-------+--------------+
| yoyz | cls1  | pxe          | 
| yoyz | cls1  | disk1/part5  |     
| yoyz | cls1  | disk1/part6  |     
| yoyz | cls1  | console      |     
| yoyz | cls1  | softboot     |     
| yoyz | cls1  | hardboot     |     
+------+-------+--------------+

5) API
------

5a) v2.1.2
----------

kadeploy->conflib.pm
kadeploy->nodes.pm
kadeploy->deploy_iolib.pm
kadeploy->bootlib.pm
kadeploy->node_bd.pm

kareboot->conflib.pm
kareboot->bootlib.pm
kareboot->deploy_iolib.pm
kareboot->rights_iolib.pm

kaconsole->conflib.pm

kaadduser->deploy_iolib;
kaadduser->rights_iolib.pm
kaadduser->conflib.pm

kadeluser->deploy_iolib;
kadeluser->rights_iolib.pm
kadeluser->conflib.pm


nodes.pm->nodes_cmd.pm
nodes.pm->bootlib.pm

bootlib.pm->grubfloppy


5.1) command.pm
---------------

sub new($$$)                 #(command,timeout,verbose) 
sub exec()                   #execute this command
sub get_status()             #true or false
sub get_exit_value()
sub get_signal_num()
sub get_dumped_core()
sub return_command()         #command string

5.2) script.pm
--------------

sub new($$$$) #(commandlist,timeout,verbose,stoponerror)
sub exec()
sub finished()
sub exec_next()
sub return_currentcommandnumber()
sub return_currentcommand()
sub next_command()


5.3) remotecommand.pm
---------------------

sub new($$$$$$)              #(connector,login,node,cmd,timeout,verbose)
sub exec()
sub exec_rsh()
sub exec_ssh()


5.4) remoteparallelcommand.pm
-----------------------------

sub new($$$$$$$)             #(connector,parallellauncher,login,nodelist,cmd,timeout,verbose)
sub check()                  #private method (help)
sub exec()
sub exec_dsh()
sub exec_DKsentinelle()
sub exec_internal()
sub get_status()             #true or false
sub return_command()         #command string


5.5) remoteparallelscript.pm
----------------------------

sub new($$$$$$$$) #(connector,parallellauncher,login,nodelist,refcommandlist,timeout,verbose)
sub exec()
sub finished()
sub exec_next()
sub return_currentcommandnumber()
sub return_currentcommand()
sub next_command()

5.6) node.pm
------------

sub new()
sub get_state()
sub set_state($)
sub get_name()
sub set_name($)
sub set_ip($)
sub get_ip()
sub set_mac($)
sub get_mac($)
sub print()
sub loadfile($)
sub addtodb()

5.7) nodelist.pm
----------------

sub new()
sub add($)
sub del($)
sub get_node($)
sub get_numberofnode()
sub get_ip_list()
sub print()


5.8) disk.pm
------------

sub new()
sub loadfile($)
sub sort_par_num { return $a <=> $b }
sub print()
sub setdisk($$)
sub getdiskfromdb()
sub setpartition($$$$$)
sub addtodb($$)
sub adddisktodb($$)
sub addpartitiontodb($$)
sub getsizeofpartition($)
sub gettypeofpartition($)



6) API v2.1.2
-------------

6.1) conflib.pm
---------------

sub check_conf;
sub check_cmd;
sub check_cmd_exist;
sub check_db_access;
sub get_conf($);
sub is_conf($);
sub dump_conf();
sub reset_conf();
sub checkdeployconf();

6.2) nodes.pm
-------------

sub new {
sub kill_sentinelle {
sub discard {
sub add {
sub syncNodesReadyOrNot {
sub ready {
sub getReadyNodes {
sub getFailedNodes {
sub get_node_by_name {
sub get_node_by_IP {
sub getCommandSummary {
sub resetCommandSummary {
sub setNodesErrorMessage {
sub checkNmap {
sub checkPortswithNmap {
sub check {
sub runThoseExtern {
sub runThose {
sub runIt {
sub runCommand {
sub runCommandSimplessh {
sub runCommandMcat {
sub runCommandMcatExtern 
sub runRemoteCommand($$)
sub runRemoteCommandTimeout($$$)
sub runRemoteCommandExtern {
sub runReportedCommand{
sub runReportedRemoteCommand {
sub runEfficientPipelinedCommand {
sub tar {
sub rebootThoseNodes 
sub rebootThoseNodesold {
sub runRemoteSystemCommand {


6.3) bootlib.pm 
---------------

sub setup_grub_pxe($$){
sub manage_grub_pxe($$){
sub generate_nogrub_files($$$$$){
sub generate_grub_files_chainload($$$$){
sub generate_grub_files($$$$$$$$){
sub setup_pxe($$$){
sub reboot($$$$){

6.4 rights_iolib.pm
-------------------

sub add_user($$$$);
sub del_user($$$$);
sub check_rights_kadeploy($$$$);
sub check_lazy_rights_kadeploy($$$);
sub clean_db($);        # will clean db in order to suppress redondancy
sub add_user($$$$){
sub del_user($$$$){
sub clean_db($){
sub check_rights_kadeploy($$$$){
sub check_lazy_rights_kadeploy($$$){

