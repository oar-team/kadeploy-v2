<?xml version="1.0" encoding="ISO-8859-1" ?>
<chapter id="HOWTO">
  <title>HOWTO
  </title>

  <sect1>
    <title>Overview
    </title>
    <para>
      Kadeploy is a deployment system suite written in perl/shell/c.
      It use a mysql databases for nodes information storing, and
      dhcp/tftp for pxe booting.  The package include kadeploy
      scripts, mysql schema, tools for pxe, deployment kernel (linux
      2.6).
    </para>

    <para>
      This Howto will suppose you are building a small cluster of two node (node-1.mycluster.net, node-2.mycluster.net).
      The configuration describe in this document support 250 node max.
      <itemizedlist>
	<listitem>cluster nodes have Ip from 192.168.0.1 to 192.168.0.250. 
	</listitem>
	<listitem>gateway, dns, dhcp, tftp, mysql services are located on the node 192.168.0.254. tftp services must be on kadeploy server, cluster services can be put on node 251 to 253.	    
	</listitem>
	<listitem>Your node need to be PXE compliant
	</listitem>
	<listitem>Your node need to be supported by the Linux kernel 
	</listitem>
      </itemizedlist>
    </para>
    
  </sect1>

  <sect1>
    <title>Required package on the server
    </title>
    <para>
      The goal of this part is to give information about all the relevant
      required tools and their configuration.
    </para>
      <sect2>
	<title>perl
	</title>
	<para>
	A decent version of Perl need to be installed on your deployment server.
	This version has been tested with the 5.8.  
	</para>
      </sect2>

      <sect2>
	<title>mysql
	</title>
	<para>
	  Kadeploy has been tested with mysql 4.1 and mysql 5.0.
	</para> 
      </sect2>


      <sect2>
	<title>sudo
	</title>
	<para>
	In order to secure your configuration files (in a multiuser cluster environment).
	you need to install sudo package. 
	It provide an easy ways to set ACL on linux system.  
	</para>
      </sect2>


      <sect2>
	<title>dhcpd
	</title>
	<para>
	PXE boot is provided by ISC dhcpd software. 
	Use the package of your distributions.
	</para> 
      </sect2>


      <sect2>
	<title>nmap
	</title>
	<para>
	Nmap is a tool for scanning remote system. Kadeploy use it,
	because it is fast and scalable.
	Version 3.9 and above are supported.
	</para> 
      </sect2>


      <sect2>
	<title>inetd/xinetd
	</title>
	<para>
	Daemon launcher use by many linux distribution.
	This package is required if your tftp daemon use it.
	</para> 
      </sect2>

      <sect2>
	<title>syslinux
	</title>
	<para>
	  It is include in kadeploy package libboot/pxelinux/
	  It contains many ntework booloader.
	</para> 
      </sect2>

      <sect2>
	<title>tftpd
	</title>
	<para>
	  kadeploy support recent tftp-hpa server.
	</para> 
    </sect2>    
  </sect1>

  <sect1>
    <title>Installation
    </title>
    <para>
      The goal of this part is to ease the deployment system
      installation steps. 
    </para>
      
    <sect2>
      <title>kadeploy
      </title>
      <para>
	  kadeploy use autoconf/automake.	  
	</para>
	<programlisting>
./configure --prefix=/usr/local/kadeploy --mandir=/usr/share/man 
make 
make install
	</programlisting>
	<para>
	  kadeploy need to access some perl lib ("pm" files). This files are
	  located in $prefix/share/perl/5u.8/libkadeploy2/. You can
	  symlink it in /usr/lib/perl/5.8/ (or a directory included in
	  your local Perl @INC).
	</para>
      </sect2>

    </sect1>


      <sect1>
	<title>kadeploy configuration file
	</title>
	<para>
	  It is mandatory to create a /etc/kadeploy directory, and put your own
	  configuration file in it.
	</para>
	<para>
	  Each file has it's own manpage and will not be describe in this howto.
	</para>
	<itemizedlist>
	  <listitem>
	    <emphasis>/etc/kadeploy/deploy.conf</emphasis> contain tools and directory
	    path, global variable, database information, and kernel boot parameters.
	( man deploy.conf )
	  </listitem>
	  
	  <listitem>
	    <emphasis>/etc/kadeploy/clusterpartition.conf</emphasis> contains default
	    partitionment schema for all nodes.
	( man clusterpartition.conf )
	  </listitem>

	  <listitem>
	    <emphasis>/etc/kadeploy/nodes/node-1.mycluster.net</emphasis> is A DIRECTORY that contains nodes informations for "node-1.mycluster.net".
	( kanodes man page )
	  </listitem>

	  <listitem>
	    <emphasis>/etc/kadeploy/nodes/node-1.mycluster.net/net</emphasis> contains the network information for the node "node-1.mycluster.net".
	( kanodes man page )
	<programlisting>
node-1.mycluster.net      00:02:b3:49:9c:8e       192.168.0.1
	</programlisting>
	  </listitem>

      <listitem>
	<emphasis>/etc/kadeploy/nodes/node-1.mycluster.net/disk1</emphasis> contains the first disk partitioning layout for the node "node-1.mycluster.net".
	It also contains the interface type of the disk and it size.
	( clusterpartition.conf man page)
      <programlisting>
ide size=8000
part=1 size=2000  fdisktype=83 label=empty type=primary
part=2 size=2000  fdisktype=83 label=empty type=primary
part=3 size=2000  fdisktype=83 label=empty type=primary
part=4 size=1000  fdisktype=83 label=empty type=primary
      </programlisting>
      </listitem>

      <listitem>
	<emphasis>/etc/kadeploy/nodes/node-1.mycluster.net/command/softboot</emphasis> contains the soft boot command for the node "node-1.mycluster.net".
	( kareboot man page )
	<programlisting>
#!/bin/sh
ssh root@node-1 /sbin/reboot
	</programlisting>
	  </listitem>

	  <listitem>
	    <emphasis>/etc/kadeploy/nodes/mynodename/command/hardboot</emphasis> contains the hard boot command for the node "node-1.mycluster.net".
	( kareboot man page, ipmi tools, service processor documentation)
	<programlisting>
#!/bin/sh
ssh root@sp-node1 platform set power state cycle
	</programlisting>
	  </listitem>

	  <listitem>
	    <emphasis>/etc/kadeploy/nodes/node-1.mycluster.net/command/console</emphasis> contains the script for attaching the serial console for the node "node-1.mycluster.net".
	<programlisting>
#!/bin/sh
ssh root@sp-node1 platform console
	</programlisting>
	  </listitem>

	</itemizedlist>

	<para>
	  Example of each file can be found in <emphasis>tools/cookbook/conf/</emphasis>
	</para>
      </sect1>




    <sect1>
      <title>Configuration
      </title>

    <sect2>
      <title>security ( sudo )
      </title>
      <para>
	kadeploy need a database.
	It connect to it with read and write access.
	The configuration files of kadeploy must be protected against "eVil USeR".
	The sudo system has been choose to protect the configuration files.
      </para>
      <para>
	The sudo package has a single configuration file "/etc/sudoers".
	You can have more information with :
      </para>

      <programlisting>
man sudoers
      </programlisting>
      
      <para>
	A simple sudoers file (TO BE COMPLETED):
      </para>

      <programlisting>
# ############################## #
#     Kadeploy Sudoers File      #
#                                #
# lines to add in the sudo file  #
# ############################## #

# User alias specification
User_Alias      KADEPLOYER   = deploy
User_Alias      KADEPLOYUSER = jpeyrard, george, maurice

# Host alias specification
Host_Alias      CLUSTER = 192.168.10.1

# Cmnd alias specification
Cmnd_Alias      KADEPLOY = /usr/local/kadeploy/bin/kaconsole, /usr/local/kadeploy/bin/kadeploy, /usr/local/kadeploy/bin/kadeployenv, /usr/local/kadeploy/bin/kaenv , /usr/local/kadeploy/bin/kaexec, /usr/local/kadeploy/bin/kamcat, /usr/local/kadeploy/bin/kapxe, /usr/local/kadeploy/bin/kareboot,/usr/local/kadeploy/bin/kareset, /usr/local/kadeploy/bin/kasudowrapper.sh

# User privilege specification
root    ALL=(ALL) ALL

KADEPLOYER   CLUSTER=NOPASSWD:KADEPLOY
KADEPLOYUSER CLUSTER=NOPASSWD:KADEPLOY
      </programlisting>
    </sect2>

      <sect2>
	<title>network configuration 
	</title>

      <sect3>
	<title>DNS
	</title>
	<para>
	  Your cluster have to offers a DNS server.
	  You can dig for Bind configuration example on the net.
	</para>
      </sect3>
      </sect2>

    <sect3>
      <title>DHCP
      </title>
	<para>
	The DHCP services is needed for PXE.
	Here is a sample "dhcpd.conf" file with 2 node.
	</para>
	<programlisting>
allow booting;
allow bootp;
deny unknown-clients;

option domain-name "mycluster.net";
option domain-name-servers 192.168.0.254;

option subnet-mask 255.255.255.0;
default-lease-time 600;
max-lease-time 7200;

subnet 192.168.0.0 netmask 255.255.255.0 {
  range 192.168.0.0 192.168.0.250;
  option broadcast-address 192.168.0.255;
  option routers 192.168.0.254;
}


host node-1 {
  hardware ethernet 00:01:02:04:73:da;
  fixed-address 192.168.0.1;
  filename "pxelinux.0";
}

host node-2 {
  hardware ethernet 00:01:02:02:a7:f5;
  fixed-address 192.168.0.2;
  filename "pxelinux.0";
}
	</programlisting>
    </sect3>

      <sect2>
	<title>access to database 
	</title>

	<para>
	  NOTE : The database can be on another host.
	</para>

	<para>
	  In order for the deployment system to access to the
	  database, correct information e.g. hostname, database name,
	  login and password should be filled in the configuration
	  file for the database.
	</para>

      <para>
	When you have a correct configured mysql server and deploy.conf file.
	You can use kadatabase script (man kadatabase)
      </para>
      <programlisting>
#kadatabase -addmysqlrights -create_db_deploy -patch21 -patch211 -patch22
      </programlisting>

      </sect2>

      <sect2>
	<title>tftp/pxe
	</title>
	<para>
	  This part explains how to configure PXE/TFTP to control the
	  booting process on the cluster nodes.
	</para>

	<para>
	  PXE configuration is done by configuring isc dhcp server and
	  a tftp server.
	</para>


	<para>
	  The nodes' hardware must be PXE compliant, this means that the
	  BIOS/EFI should allow to boot from the ethernet card. To ensure that,
	  you must verify that the network interface is PXE compliant.
	</para>
      <para>
	You have to set up a tftp server.  Install it and share the
	directory that match the keyword "tftp_repository" in
	"deploy.conf" file.
      </para>

      <para>
	Then launch the command : 
      </para>
      <programlisting>
kasetup --createtftp
      </programlisting>

      <para>
	put a file on the directory shared by the server (ex: cp /vmlinuz /tftpboot/)
	Then you have to test it with a tftp client command :
      </para>
      <programlisting>
#tftp 192.168.0.254 
get vmlinuz
      </programlisting>
      </sect2>     

    <sect2>
      <title>postinstall
      </title>
      <para>
	this script is associated to the environment to deploy. Its
	goal is to adapt the crude system image to a bootable
	system. It is composed of a gunzipped tar archive that
	contains all the sites files and a script traitement.sh in
	the archive's root directory. This archive is sent to the
	nodes, decompressed in a ramdisk and then the
	post_install_script is executed on every node. The script
	name is defined in the configuration file as
	(post_install_script).
      </para>
      
      <para>
	Here is an example of a postinstallation archive structure :
      </para>
      <programlisting>
/
/traitement.sh
/etc/
/etc/fstab
/etc/hosts
/etc/hosts.allow
/etc/hosts.deny
/etc/ntpdate
/etc/authorized_keys
      </programlisting>
      <para>
	The traitement.sh is a simple brutal script that copy and
	modify file of the target system.  It could be very simple or
	complex depend on your needs (ex: ldap, nfs, smb, ntp,
	http-proxy...)
      </para>
      
      <para>
	System modifications : 	  
      </para>
      <itemizedlist>
	<listitem>
	  <emphasis>/etc/fstab</emphasis> should be modified in
	  order to mount the correct filesystem (homedir and swap for
	  example)
	</listitem>
	
	<listitem>
	  <emphasis>/tmp</emphasis> should be user writable
	</listitem>
	<listitem>
	  <emphasis>/root/.ssh/authorized_keys</emphasis> should
	  be modified with the correct user key.
	</listitem>
	
      </itemizedlist>
    </sect2>
    
    
  </sect1>

  <sect1>
    <title>The first environment "deployment system"
    </title>
    <para>
      In order to deploy correctly a system, kadeploy need a small
      environment bootable from network.
      This environment has got the tool needed by kadeploy.
      It is called the "deployment system" environment.
    </para>

    <para>
      A deployment system is a linux kernel with an initrd that launch an ssh services.
      The mcatseg binary is put on it too.
    </para>

    <para>
      Currently debootstrap is used to create the deployment system.
      The code is very simple and rustic ( 1000 line or less )
      Some deployment system has been created for i386 and x86_64 system.
      You can check for the kadeploy-deployenv package.
      There is a README in it.
    </para>
    <para>
      This deployment system need to be register with a correct file description.
      Create a file named linuxdeploy.env and put it in a readable directory for all user.
    </para>
    <programlisting>
deploytype=   pxelinux
kernel=       /scratch/deployenv/vmlinux
initrd=       /scratch/deployenv/initrd
kernelparams= root=/dev/ram0
    </programlisting>
    <para>
      You have to register this environment with
    </para>
    <programlisting>
kaenv --add -e deployenv -l deploy -f /scratch/deployenv/linuxdeploy.env
kaenv --list
    </programlisting>
    <para>
      This is your default deployenv for all nodes (all nodes will use
      it if there is no deployenv file in their configuration
      directory).
      You have to check deploy.conf for "deployenv_name" and "deployenv_login" keyword.
    </para>
  </sect1>

  <sect1>
    <title>First deployment
    </title>
    <para>
      You have to deploy the deployment system now.
      For this, use the command :
    </para>
    <programlisting>
kadeploy deployenv@deploy -m node-1
kareboot -m node-1
    </programlisting>
    <para>
      Wait a minute or too, (you can launch kaconsole if it is configured).
      Check your connection with ssh.
      If you can login with root priviledge, launch some command, then it works :D
    </para>
  </sect1>

  <sect1>
    <title>Your first real environment
    </title>
    <para>
      No sit down and relax, you have finished the hardest path :
      <itemizedlist>
	<listitem>download the lastest release of your preffered linux system.
	</listitem>
	<listitem>install it on one of your node
	</listitem>
	<listitem>configure ssh server
	</listitem>
	<listitem>configure it for kareboot, kaconsole (and perhaps oar batch scheduler)
	</listitem>
	<listitem>Then kill all the process (except ssh server)
	</listitem>
	<listitem>Then tar it with <command>ssh node-1 tar czlvO / > /scratch/basefile.tgz</command>
	</listitem>
	<listitem>basefile.tgz is the image of your linux box.
	</listitem>	
      </itemizedlist>
    </para>
    <para>
      You have to create a description file of your environment.  This
      description file give the location of the image, the kernel, the
      initrd, the postinstall and kernel parameters of your kernel.
      Here is a sample one ( located in /scratch/debian-3.1.env ) :
    </para>
    <programlisting>
deploytype=    linux
basefile=      /scratch/debian-3.1.tgz
postinstall=   /scratch/postinstall-generic.tgz
kernel=        /scratch/vmlinuz
initrd=        /scratch/initrd.img
kernelparams=  console=ttyS0,38400n8 console=tty0
    </programlisting>
    <para>
      Then you register it to kaenv with
    </para>
    <programlisting>
kaenv --add -e debian-3.1 -l george -f /scratch/debian-3.1.env
kaenv --list
    </programlisting>
    <para>
      If you see it, then you can deploy it.
    </para>
  </sect1>

    <sect1>
      <title>Using kadeploy
      </title>
      <para>
	The deployment system is composed of several tools or commands
	whose aim is the execution of all the needed actions to carry
	out deployments and other administrative tasks. Every tool has
	his own man page.
      </para>
    
    <sect2>
      <title>kadeploy
      </title>
      <para>
	To deploy george debian-3.1 system on the second partition of
	node-1 and node-2
      </para>
      <programlisting>
kadeploy george@debian-3.1 -m node-1 -m node-2 -p 2
      </programlisting>
      <para>
	It will take 5 to 10 minute maximum.
      </para>
    </sect2>

    <sect2>
      <title>kareboot
      </title>
      <para>
	When you have trouble or just need to reboot one or more node
      </para>
      <programlisting>
kareboot -m node-1 -m node-2
      </programlisting>
    </sect2>

    <sect2>
      <title>kaconsole
      </title>
      <para>
	If you need to access the serial console of the node node-1.mycluster.net.
      </para>
      <programlisting>
kaconsole -m node-1 
      </programlisting>
      <para>
	NOTE : this command will only launch /etc/kadeploy/nodes/node-1.mycluster.net/command/console
      </para>
    </sect2>
    
    <sect2>
      <title>kareset
      </title>
      <para>
	If you have some trouble with a node and you wan't to have access to it
	now !!
      </para>
      <programlisting>
kareset -m node-1
      </programlisting>
    </sect2>
    </sect1>
  
  <sect1>
    <title>Deploying dd image system
    </title>
    <para>
      Deploying this type of image is very rude...
      There is some solution to try to support it.
    </para>
    <para>
      You have to set up the system to an easy administration state (serial console up and ssh configured).
      Set up a boot script that download a postinstall script from the server by tftp.
      Configure this script to launch the postinstall at boot.
    </para>
    <para>
      On BSD or solaris system you can make your x86 partition has big as you want.
      Make slice with swap and scratch at the end of the x86 partition.
      And dd the x86 partition you want without this swap and scratch.
      You just have to put a start script that mkfs the swap and scratch slice, then mount it.
    </para>
  </sect1>
  
  <sect1>
    <title>Deploying windows image
    </title>
    <para>
      Windows can be deploy via fat32 file system.  You have to make
      an image from a stoped windows system (via a linuxdeploy
      environment for example).
    </para>
  </sect1>

  <sect1>
    <title>Hacking kadeploy
    </title>
    <para>
      kadeploy is designed to be modularized deployment system.
    </para>
    <para>
      The reference documentation is needed but simple things can be done really fast.
    </para>
    <para>
      Example :
      If you want to try a new deployment method you have to write a new
      lib/environment/deploymentmethod file.
      You can copy windows, or linux deployment method to start.
      you have to modify the main of kadeployenv too...
    </para>

    <para>
      kamcat command is used to deploy a file to some node.
      It can be changed with another deployment system (p2p for example).
    </para>

    <sect2>
      <title>TODO
      </title>
      <para>
      ease the integration of windows RIS, 
      solaris JUMPSTART, *BSD installer on it.
      ( currently there is not a good scalable method to support it but it could be usefull)
      </para>

      <para>
	Clean the deployment system script (factorisation)...
      </para>

      <para>
	kaclone : to clone multiple node from one reference system
      </para>
      <programlisting>
kaclone -r node-1 -p 2 -m node-2 -m node-3
      </programlisting>

      <para>
	kavlan : to create vlan to deploy a new kadeploy system in it (recursivity).
      </para>

      <para>
	karecord : to record an environment without typing <command>ssh ....</command>.
      </para>
      <programlisting>
karecord -m node-1 -p 2 --basefile /tmp/basefile.tgz
      </programlisting>

      <para>
	A gui ??
      </para>

    </sect2>

  </sect1>

</chapter>
