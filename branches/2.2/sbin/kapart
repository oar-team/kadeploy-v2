#!/usr/bin/perl
use strict;
use warnings;
use libkadeploy2::cmdline;
use libkadeploy2::message;
use libkadeploy2::command;
use libkadeploy2::nodelist;
use libkadeploy2::remoteparallelcommand;
use Getopt::Long;

sub get_options();
sub check_options();
sub kapart($);

my $conf=libkadeploy2::deployconf::new();
if (! $conf->loadcheck()) { exit 1; }

my $message=libkadeploy2::message::new();


my @node_list;
my $partitionfile;
my $disknumber;
my $partnumber;
my $disktype;
my $ostype;
my $help;
my $command;
my $cmd;
my $hostfile;
my $nodelist;
my $nodeshell;
my $verbose=0;
my $kadeploydir=$conf->get("kadeploy2_directory");
my $kamcat=$conf->getpath_kamcat();
my $kasetup=$conf->getpath_kasetup();

get_options();
check_options();
kapart($nodelist);


################################################################################

sub get_options()
{
    GetOptions(
	       'm=s'                  => \@node_list,
	       'machine=s'            => \@node_list,
	       #'connector=s'          => \$connector,
	       
	       'partitionfile=s'      => \$partitionfile,
	       
	       'disknumber=s'         => \$disknumber,
	       'disktype=s'           => \$disktype,
	       
	       'ostype=s'             => \$ostype,
	       
	       'v!'                   => \$verbose,
	       'verbose!'             => \$verbose,

	       'h!'                   => \$help,
	       'help!'                => \$help,
	       );
}


sub check_options()
{
    
    if ($hostfile) 
    { 
	$nodelist=libkadeploy2::cmdline::loadhostfileifexist($hostfile); 
    }
    if (@node_list) 
    { 
	$nodelist=libkadeploy2::cmdline::loadhostcmdlineifexist(\@node_list); 
    }
    
    
    
    if (! $disknumber)    { $message->missing_cmdline(2,"disknumber"); $message->kapart_help(); exit 1; }
    if (! $disktype)      { $message->missing_cmdline(2,"disktype"); exit 1; } 
    if (! $ostype)        { $message->missing_cmdline(2,"ostype"); exit 1; }
    if (! $partitionfile) { $message->missing_cmdline(2,"partitionfile"); exit 1; }
    if (! @node_list)     { $message->missing_node_cmdline(2); exit 1; }
    if (! -f  $partitionfile) 
    {
	$message->filenotfound(2,$partitionfile);
	exit 2;
    }
}

sub kapart($)
{
    my $nodelist=shift;
    my $ok=1;
    $cmd="$kamcat --login root --servercommand \"$kasetup -printvalidfdisk -loadpartitionfile $partitionfile\" -clientcommand \" cat > /tmp/fdisk.txt\"";
    $cmd.=libkadeploy2::cmdline::get_nodes_cmdline($nodelist);
    my $remoteparallelcommand;
    
    
    $command=libkadeploy2::command::new(
					$cmd,
					20,
					$verbose
					);



    if (! $command->exec()) { $ok=0; }


    $cmd="umount -a";
    $remoteparallelcommand=libkadeploy2::remoteparallelcommand::new(
								    "ssh",
								    "internal",
								    "root",
								    $nodelist,
								    $cmd,
								    30,
								    1
								    );
    $remoteparallelcommand->exec();

    $cmd="\"cat /tmp/fdisk.txt \| fdisk /dev/hda\"";
    $remoteparallelcommand=libkadeploy2::remoteparallelcommand::new(
								    "ssh",
								    "internal",
								    "root",
								    $nodelist,
								    $cmd,
								    20,
								    1
								    );
								    
    if (! $remoteparallelcommand->exec()) { $ok=0; }
    

    if ($ok)
    {
	$message->message(0,"Partition done for node ".$nodelist->get_str());
	exit 0;
    }
    else
    {
	$message->message(2,"Partition failed for node ".$nodelist->get_str());
	exit 1;
    }

}
