#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use libkadeploy2::message;
use libkadeploy2::environment;
use libkadeploy2::deploy_iolib;
use libkadeploy2::deployconf;
use libkadeploy2::nodelist;
use libkadeploy2::command;
use libkadeploy2::nmap;
use libkadeploy2::checknodes;

sub check_options();

my $message=libkadeploy2::message::new();
my $conf=libkadeploy2::deployconf::new();
if (! $conf->loadcheck()) { exit 1; }
my $kadeploydir=$conf->get("kadeploy2_directory");

my $kareboot=$conf->getpath_cmd("kareboot");
my $kapxe=$conf->getpath_cmd("kapxe");
my $kapart=$conf->getpath_cmd("kapart");
my $nmap=libkadeploy2::nmap::new();
my @node_list;
my $refnodelist;
my $disknumber=1;
my $partnumber=1;
my $login;
my $help;
my $verbose=0;
my $envname;
my $environment;
my $nodelist;
my $basefile;
my $partitionfile;
my $cmd;
my $ok=1;
my $node;
my $noreboot=0;
my $db;
my $check;
my $list;

check_options();

if (@node_list)
{
    $nodelist=libkadeploy2::nodelist::new();
    $nodelist->loadlist(\@node_list);
    $refnodelist=$nodelist->get_nodes();
    @node_list=@$refnodelist;
}
else
{
    $message->missing_node_cmdline(2);
    exit 1;
}



if ($check)
{
    $db=libkadeploy2::deploy_iolib::new();
    $db->connect();
    foreach $node (@node_list)
    {
	my $check=libkadeploy2::checknodes::new($node,$db);
	$check->exec();
    }  
    $db->disconnect();
}

if ($list)
{
    $db=libkadeploy2::deploy_iolib::new();
    $db->connect();
    my @service_list=("SSH","ICMP","MCAT");
    my $service;
    foreach $node (@node_list)
    {
	foreach $service (@service_list)
	{
	    $message->message(0,$node->get_name()." ".$service." ".$db->get_nodestate($node->get_name(),$service));
	}
    }
    $db->disconnect();
}
################################################################################


sub check_options()
{
    GetOptions(
	       'check!'               => \$check,
	       'list!'                => \$list,
	       
	       'm=s'                  => \@node_list,
	       'machine=s'            => \@node_list,
	       	       
	       'h!'                   => \$help,
	       'help!'                => \$help,
	       
	       'v!'                   => \$verbose,
	       'verbose!'             => \$verbose,
	       );
}
