#### CONFIGURE VARIABLE

# export ERLC_EMULATOR to fix a bug in R9B with native compilation
ERLC_EMULATOR=@ERL@
export ERLC_EMULATOR
ERL=@ERL@
ERLC=@ERLC@
SED=@SED@
ERL_OPTS=@ERL_OPTS@
# FIXME
DIALYZER=dialyzer

ERLDIR=@ERLDIR@
export ERLDIR

ERLANG_XMERL_DIR=@ERLANG_XMERL_DIR@

raw_erlang_prefix=@libdir@/erlang/

prefix=$(DESTDIR)@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
datadir=@datadir@
TEMPLATES_SUBDIR=@TEMPLATES_SUBDIR@

CONFIGURE_DEPENDENCIES=@CONFIGURE_DEPENDENCIES@
CONFIG_STATUS_DEPENDENCIES=@CONFIG_STATUS_DEPENDENCIES@

VERSION=@PACKAGE_VERSION@
PACKAGE=@PACKAGE_NAME@
DTD=@DTD@

#### END OF SUBSTITUTION

SVN_REVISION=$Revision: 829 $

ERL_COMPILER_OPTIONS="[warn_unused_vars]"
export ERL_COMPILER_OPTIONS

ifeq ($(TYPE),debug)
OPT =+debug_info -DDEBUG
else
 ifeq ($(TYPE),native)
   OPT:=+native
  else
   OPT = +strict_record_tests +strip
  endif
endif

ifeq ($(TYPE),test)
OPT =+export_all
endif


INC = ./include
CC  = $(ERLC)

ESRC = ./src
EBIN = ./ebin
ifeq ($(TYPE),snapshot)
DAY=$(shell date +"%Y%m%d")
distdir = $(PACKAGE)-$(VERSION)-$(DAY)
else
distdir = $(PACKAGE)-$(VERSION)
endif

# installation path
BINDIR    = $(bindir)
LIBDIR    = $(libdir)/kadeploy/bin/
CONFDIR   = $(datadir)/doc/kadeploy/examples
SHARE_DIR = $(datadir)/kadeploy/
TEMPLATES_DIR = $(datadir)/$(TEMPLATES_SUBDIR)
MAN_DIR   = $(datadir)/man/man1/
DOC_DIR   = $(datadir)/doc/kadeploy

BUILDER_LOG   = /tmp/builder-kadeploy.log

ERLANG_LIB_DIR = $(libdir)/erlang/lib

APPLICATION = kadeploy

TARGETDIR = $(ERLANG_LIB_DIR)/$(APPLICATION)-$(VERSION)

TEMPLATES = $(wildcard $(ESRC)/templates/*.thtml)
TMP       = $(wildcard *~) $(wildcard src/*~) $(wildcard inc/*~)
INC_FILES = $(wildcard $(INC)/*.hrl)
LIBSRC    = $(wildcard $(ESRC)/lib/*.erl)
TESTSRC    = $(wildcard $(ESRC)/test/*.erl)
SRC       = $(wildcard $(ESRC)/$(APPLICATION)/*.erl)
CONFFILE_SRC = $(wildcard examples/*.xml.in)
CONFFILE = $(basename $(CONFFILE_SRC))
TEST_CONFFILE_SRC = $(wildcard src/test/*.xml.in)
TEST_CONFFILE = $(basename $(TEST_CONFFILE_SRC))
USERMANUAL = doc/user_manual.html  doc/IDXDOC.css
USERMANUAL_IMG = $(wildcard doc/images/*.png)
USERMANUAL_SRC = doc/user_manual.tex
PERL_SCRIPTS_SRC = $(wildcard $(ESRC)/*.pl.in)
PERL_SCRIPTS = $(basename $(PERL_SCRIPTS_SRC))

TARGET   = $(addsuffix .beam, $(basename \
             $(addprefix $(EBIN)/, $(notdir $(SRC)))))
LIB_TARGET   = $(addsuffix .beam, $(basename \
             $(addprefix $(EBIN)/, $(notdir $(LIBSRC)))))
TEST_TARGET   = $(addsuffix .beam, $(basename \
             $(addprefix $(EBIN)/, $(notdir $(TESTSRC)))))
DEBIAN    = debian/changelog debian/control debian/compat debian/copyright debian/docs debian/kadeploy.dirs debian/rules

SRC_APPFILES   = $(ESRC)/$(APPLICATION)/$(APPLICATION).app.src $(ESRC)/$(APPLICATION)/$(APPLICATION).rel.src
SRC_APPFILES_IN   = $(ESRC)/$(APPLICATION)/$(APPLICATION).app.src.in $(ESRC)/$(APPLICATION)/$(APPLICATION).rel.src
TGT_APPFILES_E = $(EBIN)/$(APPLICATION).app
TGT_APPFILES_P = priv/$(APPLICATION)*

SCRIPT   = $(BINDIR)/kadeploy
SCRIPT-SERVER   = $(BINDIR)/kadeploy-server
PWD = $(shell pwd)
BUILD_OPTIONS =	'[{systools, \
        [{variables,[ \
         {"KADEPLOYPATH", "$(PWD)/temp/"}] \
        }]}, \
        {sh_script, none}, \
        {make_app, true }, {make_rel, true}].'

BUILD_OPTIONS_DOT = $(subst $(PWD)/temp/,./,$(BUILD_OPTIONS))

BUILD_OPTIONS_FILE = ./BUILD_OPTIONS

DIST_COMMON=Makefile.in $(CONFFILE_SRC) $(PERL_SCRIPTS_SRC) kadeploy.sh.in kadeploy-server.sh.in kadeploy.spec.in


.PHONY: doc

kadeploy: Makefile config.status $(PERL_SCRIPTS) kadeploy.sh kadeploy-server.sh kadeploy.spec $(TARGET) $(RECORDER_TARGET) $(CONTROLLER_TARGET) $(LIB_TARGET)

buildtest: $(TEST_TARGET)

fulltest:  clean test

test:
	$(MAKE) TYPE=test dotest

dotest: kadeploy boot buildtest $(CONFFILE) $(TEST_CONFFILE)
	@mkdir -p /tmp/tftpboot/PXEClient/images_grub
	@mkdir -p /tmp/tftpboot/PXEClient/pxelinux.cfg
	$(ERL) +A 16 -noshell -sname testserver -pa ./ebin -s eunit test katests_all -s init stop -setcookie testcookie

g5ktest:
	$(MAKE) TYPE=test g5kdotest

g5kdotest: kadeploy boot buildtest $(CONFFILE) $(TEST_CONFFILE)
	$(ERL) +A 16 -noshell -rsh ssh -name testserver -pa ./ebin -s eunit test katests_g5k_all -s init stop -setcookie testcookie

dialyzer:
	$(DIALYZER) -r ebin  -I ./include/

all: clean kadeploy

debug:
	$(MAKE) TYPE=debug

native:
	$(MAKE) TYPE=native

rpm:	release kadeploy.spec
	rpmbuild -ta $(distdir).tar.gz

validate: $(CONFFILE)
	@for i in $(CONFFILE); do xmlproc_val $$i; done

deb:
	fakeroot debian/rules clean
	debian/rules build
	fakeroot debian/rules binary

clean:
	-cd priv && rm -f $(shell ls priv | grep -v builder\.erl| grep -v CVS) && cd ..
	-rm -f $(TARGET) $(TMP) $(BUILD_OPTIONS_FILE) builder.beam confapp*
	-rm -f $(TGT_APPFILES) kadeploy.sh $(PERL_SCRIPTS) $(CONFFILE)
	-rm -f $(ESRC)/$(APPLICATION)/$(APPLICATION).app.src
	-rm -f ebin/*.beam kadeploy*.sh kadeploy.spec kadeploy.xml
	-rm -fr auto*cache

install: boot $(CONFFILE)
	-rm -f $(TMP)

	install -d $(TARGETDIR)/priv
	install -d $(TARGETDIR)/ebin
	install -d $(TARGETDIR)/src
	install -d $(TARGETDIR)/include
	install -d $(LIBDIR)/
	install -d $(BINDIR)/

	cp $(INC_FILES) $(TARGETDIR)/include
	cp $(TARGET) $(TARGETDIR)/ebin
# 	cp $(LIB_TARGET) $(TARGETDIR)/ebin
	cp builder.beam $(TARGETDIR)/ebin

	cp $(TGT_APPFILES_E) $(TARGETDIR)/ebin
	cp $(TGT_APPFILES_P) $(TARGETDIR)/priv

	cp $(SRC) $(SRC_APPFILES) $(TARGETDIR)/src
	echo $(BUILD_OPTIONS_DOT) > $(TARGETDIR)/BUILD_OPTIONS

# install the man page & user's manual
	install -d $(MAN_DIR)
# 	install doc/kadeploy.1 $(MAN_DIR)
# 	install -d $(DOC_DIR)/images
# 	install $(USERMANUAL) $(DOC_DIR)
# 	install $(USERMANUAL_IMG) $(DOC_DIR)/images

# create startup script
	install kadeploy.sh $(SCRIPT)
	install kadeploy-server.sh $(SCRIPT-SERVER)
# 	install $(PERL_SCRIPTS) $(LIBDIR)/

# 	install -d $(CONFDIR)
# 	cp $(CONFFILE) $(CONFDIR)

# 	install -d $(TEMPLATES_DIR)
# 	cp $(TEMPLATES) $(TEMPLATES_DIR)
# 	cp $(DTD) $(SHARE_DIR)

uninstall:
	rm -rf $(TARGETDIR) $(SCRIPT)

boot: kadeploy priv/kadeploy.boot $(SRC_APPFILES_IN)

priv/kadeploy.boot: builder.beam  $(SRC_APPFILES)
# use builder to make boot file
	@rm -rf temp
	@mkdir -p temp/lib/$(APPLICATION)-$(VERSION)
	@ln -sf $(PWD)/ebin temp/lib/$(APPLICATION)-$(VERSION)/ebin
	@ln -sf $(PWD)/src/$(APPLICATION) temp/lib/$(APPLICATION)-$(VERSION)/src
	@ln -sf $(PWD)/include temp/lib/$(APPLICATION)-$(VERSION)/include
	@ln -sf $(PWD)/priv temp/lib/$(APPLICATION)-$(VERSION)/priv
	@ln -sf $(PWD)/builder.beam temp/lib/$(APPLICATION)-$(VERSION)/
	@ln -sf $(PWD) temp/lib/$(APPLICATION)-$(VERSION)
	@echo -n "build main app boot script ... "
	@(cd temp/lib/$(APPLICATION)-$(VERSION) \
	 && echo $(BUILD_OPTIONS) > $(BUILD_OPTIONS_FILE) \
	 && $(ERL) -s builder go -s init stop >> $(BUILDER_LOG) 2>&1 \
	)
	@rm -rf temp
	@echo "done"


Makefile: Makefile.in config.status
	@$(SHELL) ./config.status --file=$@

%.pl:  %.pl.in vsn.mk
	@$(SHELL) ./config.status --file=$@

%.spec:  %.spec.in vsn.mk
	@$(SHELL) ./config.status --file=$@

%.xml:  %.xml.in
	@$(SHELL) ./config.status --file=$@

src/$(APPLICATION)/%.app.src:  src/$(APPLICATION)/%.app.src.in
	@$(SHELL) ./config.status --file=$@

%.sh :%.sh.in vsn.mk
	@$(SHELL) ./config.status --file=$@

config.status: configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

configure: configure.in $(CONFIGURE_DEPENDENCIES)
	@echo "running autoconf"
	@autoconf

doc:
	$(MAKE) -C doc

release: Makefile kadeploy.spec
	rm -fr $(distdir)
	mkdir -p $(distdir)
	tar zcf tmp.tgz $(SRC) $(SRC_APPFILES_IN) $(INC_FILES) $(LIBSRC) \
		$(TESTSRC) $(TEMPLATES) \
		$(CONFFILE_SRC) $(TEST_CONFFILE_SRC) \
		priv/builder.erl kadeploy.sh.in vsn.mk  \
		src/test/*.dd src/test/*.conf src/test/*.tgz \
		configure configure.in Makefile.in \
		install-sh kadeploy.spec.in kadeploy.spec
	tar -C $(distdir) -zxf tmp.tgz
	mkdir $(distdir)/ebin
	tar zvcf  $(distdir).tar.gz $(distdir)
	rm -fr $(distdir)
	rm -fr tmp.tgz

snapshot:
	$(MAKE) TYPE=snapshot release

builder.beam: priv/builder.erl
	@$(CC) -W0 $(OPT) -I $(INC) $<

ebin/%.beam: src/test/%.erl $(INC_FILES)
	@echo  "Compiling test $< ... "
	@$(CC) -W0 $(OPT) -I $(INC) -I $(ERLANG_XMERL_DIR) -o ebin $<

ebin/%.beam: src/lib/%.erl $(INC_FILES)
	@echo  "Compiling  $< ... "
	@$(CC) -W0 $(OPT) -I $(INC) -I $(ERLANG_XMERL_DIR) -o ebin $<

ebin/%.beam: src/$(APPLICATION)/%.erl $(INC_FILES)
	@echo  "Compiling  $< ... "
	@$(CC) $(OPT) -I $(INC) -I $(ERLANG_XMERL_DIR) -o ebin $<


%:%.sh
# Override makefile default implicit rule
