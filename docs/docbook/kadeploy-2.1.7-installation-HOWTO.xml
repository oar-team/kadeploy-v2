<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "/usr/share/xml/docbook/schema/dtd/4.4/docbookx.dtd">

<article  id="kadeploy_install_HOWTO" lang="en">
	<title>Kadepoy 2.1.7 installation HOW-TO</title>
	
	<articleinfo>
		<author>
			<firstname>Benjamin</firstname>
			<surname>DEXHEIMER</surname>
  		</author>
		<author>
			<firstname>Emmanuel</firstname>
			<surname>JEANVOINE</surname>
		</author>
		<date>18/02/2008</date>
		<releaseinfo>0.2</releaseinfo>
		<abstract>
			<para>
This HOW-TO deals about installation process of Kadeploy. In particular, the process for a parallel installation of Kadeploy aside from an already working (but older) instance of Kadeploy would be explained. Then some generic points related to installation process will be exposed.
			</para>
		</abstract>
  	</articleinfo>
	
 	<sect1 id="prerequisites">
		<title>Pre-requisites before performing a duplicate installation of Kadeploy</title>
		<para>
The Kadeploy commands suite cannot handle a customized configuration path, which is set by default at <filename>/etc/kadeploy</filename>. It implies to use a second server so as to have at the same time a production and a testing-purpose instance of Kadeploy. 
		</para>
			<para>
From now, the frontend machine hosting the production-class Kadeploy will be designated by <emphasis>frontend-prod</emphasis> and the frontend hosting the testing version will be designated by <emphasis>frontend-dev</emphasis>.
			</para>
			<para>
Kadeploy needs several resources :
			</para>
<itemizedlist>
	<listitem><para>rsh client</para></listitem>
	<listitem><para>DHCP server</para></listitem>
	<listitem><para>PXE booting environment (usually from Syslinux project) for booting nodes</para></listitem>
	<listitem><para>TFTP server, and therefore a writeable access to root TFTP directory served by tftp daemon (e.g. <filename>/var/lib/tftpboot</filename> and its sub-directories)</para></listitem>
	<listitem><para>MySQL database</para></listitem>
	<listitem><para>Perl modules</para></listitem>
	<listitem><para>File-system level read access to Grid'5000 deployable system images.</para></listitem>
</itemizedlist>
			<sect2 id="rsh">
				<title>rsh client</title>
				<para>
Kadeploy requires the usage of a legacy rsh client. This could be somewhat problematic because rsh is not installed by default  anymore in modern Linux distributions, although rsh responds at CLI (but it's a symbolic link pointing to ssh client). In debian-like systems, you have to install the package <emphasis>rsh-client</emphasis> to obtain the real rsh client.
				</para>
			</sect2>
			<sect2 id="dhcp">
				<title>DHCP</title>
				<para>
Because of nature of DHCP, it's rather difficult to have side by side 2 servers handling the same set of nodes but with different configuration. That's why nodes used during Kadeploy tests will be booted with the same DHCP as for production use.
				</para>				
			</sect2>
			<sect2 id="tftppxe">
				<title>TFTP and PXELinux</title>
				<para>
Because of <link linkend="dhcp">previous DHCP configuration</link>, the testing instance of Kadeploy will use the same TFTP server and therefore, the testing and production instances need to write PXE files at the same place. 
				</para>
				<para>
The steps to follow are :
				</para>
				
				<orderedlist>
					<listitem>
						<para>
Install a NFS server on frontend hosting TFTP service.
						</para>
					</listitem>
					<listitem>
						<para>
Make export root TFTP directory (cf <filename>/etc/exports</filename>) from this frontend.
						</para>
					</listitem>
					<listitem>
						<para>
On frontend-dev : import the previously exported root TFTP directory.
						</para>
					</listitem>
				</orderedlist>
				<para>

The PXE environment is usually set by the cluster sysadmin in accordance with the TFTP installation layout. PXE related files and directories are likely to be located under TFTP root directory (cf <filename>pxelinux.0</filename> bootloader and <filename>pxelinux.cfg</filename> directory containing the boot configuration for the nodes). If TFTP root directory is NFS-mounted by frontend-dev, it will have access to PXE ressources, too.
				</para>
			</sect2>
			<sect2 id="mysql">
				<title>MySQL database</title>
				<para>
<application>Kadeploy</application> needs an access as root and deploy user to a MySQL instance. Make sure your MySQL running server is reachable from frontend-dev using the MySQL root user. 
For instance, the following command should be working from frontend-dev : 
<programlisting>
	mysql -u root -p -h mysql.<![CDATA[<site>]]>.grid5000.fr
</programlisting>
				</para>
			<sect3 id="mysql_par">
				<title>Case of parallel installation</title>
			<para> If you're planning for a parallel installation, you have to setup a testing-purpose Kadeploy DB aside from the production DB. The test DB would be hosted on the same MySQL server than the production DB. The script used to setup the test DB expects to find both databases on the same MySQL server.
			</para>
			</sect3>
			</sect2>
			<sect2 id="perl">
				<title>Perl modules</title>
				<para>
					Kadeploy is fully written en Perl, and therefore is based upon some Perl modules.
					You have to ensure that the packages listed below (Debian names) are installed on the deployment frontend (the machine hosting the Ka* commands) :
					<itemizedlist>
						<listitem><filename>libterm-readkey-perl</filename></listitem>
						<listitem><filename>libdbi-perl</filename></listitem>
						<listitem><filename>libdbd-mysql-perl</filename></listitem>
					</itemizedlist>
				</para>
			</sect2>
			<sect2 id="images">
				<title>Grid'5000 images</title>
				<para>
Kadeploy needs a direct file-system access to deployable system images. The <filename>/grid5000</filename> directory have to be NFS mounted by fronted-dev.
				</para>
			</sect2>
		</sect1>
		<sect1>
			<title>Key points to be aware of</title>
			<sect2>
				<title>Makefile usage</title>
				<para>
					Kadeploy's makefile offers 3 targets. 
					<itemizedlist>
						<listitem><para><command>install</command> : use this target to install Kadeploy on the deployment frontend (may it be production or test). </para>
							<para>
								<emphasis>It must run as root.</emphasis>
							</para>
						<procedure>
							<para>
								The following actions are performed on the target system :
							</para>
							<step>
								<para>
									Create if necessary user and group <emphasis>deploy</emphasis>.
								</para>
							</step>
							<step>
								<para>
									Copies commands, libraries, configuration files and manpages to correct places.
								</para>
							</step>
							<step>
								Do the sudowrapper configuration (in <filename>/etc/sudoers</filename>) and create corresponding symlinks to Kadeploy utility commands.
							</step>
						</procedure>	
						</listitem>
						<listitem>
							<para><command>uninstall</command> : use this target to uninstall a previous installation of <emphasis>Kadeploy 2.1.7</emphasis>.</para>
							<para>
								<emphasis>It must be run as root.</emphasis></para>
							<procedure>
								<para>The following actions are performed on the target system </para>
								<step>
									<para>	
									Removes all Kadeploy files (commands, libraries, configuration files and manpages).
								</para>
								</step>
								<step>
									<para>
										Removes the sudowrapper configuration (in <filename>/etc/sudoers</filename>).
									</para>
								</step>
							</procedure>
						</listitem>
						<listitem>
							<para><command>dist</command> : use this target from the SVN root directory (<filename>trunk/</filename>). It packs all Kadeploy files into a tgz typed archive. This archive will be used later to install Kadeploy on a deployment frontend.</para>
								<procedure>
									<para>
										In particular, it generates this HOW-TO and manpages.
										</para>
								</procedure>
						</listitem>
					</itemizedlist>
				</para>
			</sect2>
			<sect2>
				<title>Setup of database</title>
				<para>
					Various operations on Kadeploy internal database should be done with the <command>kadatabase</command> command. When using this command, you should keep in mind that point : 
					<itemizedlist>
						<listitem>
							<para>
								DB settings should have be done on Kadeploy main configuration file (<filename>/etc/kadeploy/deploy.conf</filename>).</para>
							<para>
								Specifically, some informations like DB hostname, DB name, deploy username and password are expected by kadatabase to be found in this file. Ensure to have a working configuration before doing any DB setup.
							</para>
						</listitem>
					</itemizedlist>
					It supports the following options :
					<itemizedlist>
						<listitem><para>
							<command>--create-db-deploy-217</command> : creates a Kadeploy 2.1.7 compliant DB, which is empty from any data.
							<warning>this option is destructive if you're giving a name already used by a previously existing DB.</warning></para>
						</listitem>
						<listitem>
							<para>
							<command>--dup-production-db</command> : duplicates data from a production DB into a testing DB. It asks for both DB names.
							<note>It duplicates only static data (not history), that is said : disk, environment, node and partition tables.</note>
						</para>
						</listitem>
						<listitem>
							<para>
							<command>--dup-deployment-rights</command> : duplicates deployment data rights from production DB into testing DB.
							<note>It is useful when testing Kadeploy 2.1.7 when OAR is still connected to a production working Kadeploy 2.1.6.</note>
						</para>
						</listitem>
						<listitem>
							<para>
							<command>--db-migration-216-to-217</command> : changes a Kadeploy 2.1.6 DB schema into a Kadeploy 2.1.7 compliant DB schema.</para>
						</listitem>
						<listitem>
							<para>
							<command>--add-deploy-db-user</command> : adds the deploy user into the user table and grants him corrects privileges.</para>
						</listitem>
						<listitem>
							<para>
							<command>--del-deploy-db-user</command> : removes the deploy user from the user table and flushes his privileges.</para>
						</listitem>
						<listitem>
							<para>
							<command>--purge-test-db</command> : removes all data from the testing DB (disk, environment, node, partition and rights tables).
						</para>
						</listitem>
						<listitem>
							<para>
							<command>--drop-db-deploy</command> : drops the specified DB (may it be production or testing).
						</para>
						</listitem>
						<listitem>
							<para>
							<command>--clean-db-deploy</command> : removes all history data from the production DB (deployed and deployment tables).
						</para>
						</listitem>					
					</itemizedlist>
					Others options are no longer used and may be deprecated ; please do not use them.
				</para>
			</sect2>
			<sect2>
				<title>Recommanded installation layout</title>
					<para>
						You may choose the installation PREFIX of your choice. A standard choice will be <filename>/usr/local</filename>.
					</para>
					<para>
						the KADEPLOYHOMEDIR will default to <![CDATA[<PREFIX>]]>/kadeploy-2.1.7. It's generally a good idea to leave it unchanged.
					</para>
					<para>
						DEPLOYUSER and DEPLOYGROUP will default to <emphasis>deploy</emphasis>. To keep compliance with habits from Kadeploy 2.1.6, it's generally a good idea to leave them unchanged. 
					</para>
					<para>
						KADEPLOYCONFDIR must be leaved unchanged. Kadeploy commands will search their configuration file into <filename>/etc/kadeploy</filename>. This directory is unfortunately hard-coded and cannot be easily changed without code refactoring. By default, Kadeploy 2.1.7 creates a <filename>/etc/kadeploy-2.1.7</filename> configuration directory and makes a symlink <filename>/etc/kadeploy</filename> onto it. It preserves a previously existing <filename>/etc/kadeploy</filename> directory (from a 2.1.6 release for instance) by renaming it into <filename>/etc/kadeploy.old</filename>.
					</para>
					<para>
						if your DISTRIB is not in the Makefile, some lines should be added to set up some PATHS which are distribution dependant. Please ask Kadeploy staff for extensive explanations.
					</para>
			</sect2>
		</sect1>
		<sect1 id="217install">
			<title>How-to perform a parallel installation</title>
			<para>
The frontend considered for this operation is <emphasis>frontend-dev</emphasis>.
			</para>
			<para>
Please follow the instructions below : 
			</para>
			<procedure>
				<step>
					<para>
Retrieve and unpack the tarball archive of Kadeploy 2.1.7 (<filename>kadeploy-2.1.7.tar.gz</filename>) into a safe location (e.g. your home directory).
					</para>
<programlisting>
cd <![CDATA[<path_to_unpack_kadeploy_archive>]]> <![CDATA[&&]]> tar -xvzf kadeploy-2.1.7.tar.gz
</programlisting>
					
				</step>
				<step>
					<para>
Edit the heading variables of <filename>Makefile</filename> located at the top of Kadeploy archive.
					</para>
					<substeps>
						<step>
							<para>
Especially, the following variables :
							</para>
							<itemizedlist>
								<listitem>
									<para>
<command>DISTRIB</command> : your distribution name. It sets an installation path for Perl library used by Kadeploy. Recognized distributions are : debian4 (Debian Etch 4.x), Fedora Core 4. Another distribution will set to default pathname. 
									</para>
								</listitem>
								<listitem>
									<para>
<command>PREFIX</command> : the PREFIX for installation pathnames.
									</para>
								</listitem>
							</itemizedlist>
						</step>
						<step>
							<para>
This variables may be of interest, too :
							</para>
							<itemizedlist>
								<listitem>
									<para>
<command>KADEPLOYHOMEDIR</command> : where Kadeploy files are installed. By default it's compound by the PREFIX and the path string <filename>kadeploy-<![CDATA[<VERSION>]]></filename>. </para>
<para>That variable is tied to the one specified in main Kadeploy's configuration file <filename>deploy.conf</filename> : <emphasis>kadeploy2_directory</emphasis>. Please ensure the same value has been entered for boths variables otherwise some path will be missing at run time.
									</para>
								</listitem>
								<listitem>
									<para>
<command>DEPLOYUSER</command> and <command>DEPLOYGROUP</command> : username and groupname of the identity used by Kadeploy to perform his work (instead of using the super-privileged user <emphasis>root</emphasis>). The value <emphasis>deploy</emphasis> is set by default for both variables.
									</para>
								</listitem>
							</itemizedlist>
						</step>
					</substeps>
				</step>
				<step>
					<para>
Install Kadeploy by using the command as <emphasis>root</emphasis> : 
					</para>
<programlisting>
make install
</programlisting>
				</step>
				<step>
					<para>
Make sure that UID/GID used for the <replaceable>deploy</replaceable> user on frontend-dev are the same that those on frontend-prod. Otherwise, make changes accordingly on frontend-dev to get same UID/GID values on both machines. It's important for later file-system accesses 
					</para>
				</step>
				<step>
					<para>
Get TFTP root directory and Grid'5000 deployable images repository NFS mounted on frontend-dev.
					</para>
				</step>
				<step>
					<para>
Get your Kadeploy 2.1.7 configuration ready. A quick way to achieve this is to copy into the test kadeploy configuration directory all production configuration files and modify them. Some informations into this files will be needed by the next step.
					</para>
				</step>
				<step>
					<para>
Setup the Kadeploy database. The goal is to have side by side the production DB and the test DB. Informations will be sync from production to test DB to get the test DB initialized and working-ready. The command to interact with the Kadeploy DB is <command>kadatabase</command>. It will ask for several informations, as MySQL login and password, database names.
					</para>
					<substeps>
						<step>
							<para>
To setup the second Kadeploy database, issue the following commands : 
							</para>
							<itemizedlist>
								<listitem>
									<para>
<command>kadatabase --create-db-deploy-217</command> : create a Kadeploy 2.1.7 empty database.
									</para>
								</listitem>
								<listitem>
									<para>
<command>kadatabase --add-deploy-db-user</command> : add the deploy DB user into the MySQL instance. This is the mysql user used by Kadeploy for getting access to his database. It may be different from the production deploy DB user.
									</para>
								</listitem>
								<listitem>
									<para>
<command>kadatabase --dup-production-db</command> : duplicate the production DB into the test DB. Both DB names will be asked during operation. After that, you will have a working-ready test DB.
									</para>
								</listitem>
								<listitem>
									<para>
<command>kadatabase --dup-deployment-rights</command> : duplicate deployment rights into test DB. To be used each time a OAR submission have been issued from the OAR frontend. It gives the test kadeploy rights to deploy on the reserved nodes.
									</para>
								</listitem>
							</itemizedlist>
						</step>
					</substeps>
				</step>
				<step>
					<para>
That's all folks !
					</para>
				</step>
			</procedure>
			<note>
					<itemizedlist>
						<listitem>
							<para>
Remember to issue kadeploy commands from frontend-dev when you want to test the 2.1.7 version.	
							</para>
						</listitem>
						<listitem>
							<para>
Remember to issue <command>kadatabase --dup-deployment-rights</command> each time you've done an OAR reservation.
							</para>
						</listitem>

					</itemizedlist>
			</note>
	</sect1>
	<sect1 id="collatfittings">
		<title>Collateral fittings</title>
		<para>
			Several operations must be performed to get a fully working Kadeploy 2.1.7.
			<itemizedlist>
				<listitem>
					<para>
						The deployment kernel must be rebuilt thanks to the script provided in the <filename>addons/deployment_kernel_generation</filename> directory of the Kadeploy's distribution. Warning, the deployment kernel must not be compiled with the SMP support, otherwhise kexec will not work.
					</para>
				</listitem>
				<listitem>
					<para>
						The configuration files <filename>/etc/kadeploy/deploy.conf</filename> and <filename>/etc/kadeploy/deploy-cluster.conf</filename> must be updated according the example provided in the <filename>confs</filename> directory of the distribution. In particular, pay attention to the options <command>use_kexec_by_default</command>, <command>default_target_device</command> and <command>default_target_partition</command>.
					</para>
				</listitem>
				<listitem>
					<para>
						The preinstall file must be modified according the files given in the <filename>addons/preinstallation</filename> directory of the distribution.
					</para>
				</listitem>
				<listitem>
					<para>
						The SSH public key of the user deploy must be added in the root's <filename>authorized_keys</filename> on the production environment of the nodes (this is used for the kexec optimization).
					</para>
				</listitem>
				<listitem>
					<para>
						The SSH public key of the user root of the production environment must be added in the root's <filename>authorized_keys</filename> on the production environment of the nodes (this is used for the kexec optimization).
					</para>
				</listitem>
				<listitem>
					<para>
						The files located in the <filename>scripts/scripts_used_to_deploy</filename> directory of the distribution must be copied in the <filename>/usr/local/bin</filename> directory of the production environment on the nodes.
					</para>
				</listitem>
			</itemizedlist>
		</para>	
	</sect1>
</article>
