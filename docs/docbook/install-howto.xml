<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "/usr/share/xml/docbook/schema/dtd/4.4/docbookx.dtd">

<article  id="kadeploy_installation_howto" lang="en">
	<title>Kadepoy installation HOW-TO</title>
	
	<articleinfo>
		<author>
			<firstname>Benjamin</firstname>
			<surname>DEXHEIMER</surname>
  		</author>
		<date>18/02/2008</date>
		<releaseinfo>0.1</releaseinfo>
		<abstract>
			<para>
This HOW-TO deals about the installation methods of Kadeploy. Firstly we would explain how-to perform a parallel installation aside from the production instance of a previously installed Kadeploy, and secondly how to perform a production installation of Kadeploy 2.1.7.
			</para>
		</abstract>
  	</articleinfo>
	
  	<sect1 id="parallel_install">
  		<title>How-to perform a parallel installation</title>
  		<para>
This part explains how-to have at the same time a testing-purpose instance of Kadeploy aside from the production instance.
		</para>
		<sect2 id="prerequisites">
			<title>Pre-requisites</title>
			<para>
The Kadeploy commands suite cannot handle a customized configuration path, which is set by default at <filename>/etc/kadeploy</filename>. It implies to use a second server so as to have at the same time a production and a testing-purpose instance of Kadeploy. 
			</para>
			<para>
From now, the frontend machine hosting the production-class Kadeploy will be designated by <emphasis>frontend-prod</emphasis> and the frontend hosting the testing version will be designated by <emphasis>frontend-dev</emphasis>.
			</para>
			<para>
Kadeploy needs several resources :
			</para>
<itemizedlist>
	<listitem><para>rsh client</para></listitem>
	<listitem><para>DHCP server</para></listitem>
	<listitem><para>PXE booting environment (usually from Syslinux project) for booting nodes</para></listitem>
	<listitem><para>TFTP server, and therefore a writeable access to root TFTP directory served by tftp daemon (e.g. <filename>/var/lib/tftpboot</filename> and its sub-directories)</para></listitem>
	<listitem><para>MySQL database</para></listitem>
	<listitem><para>File-system level read access to Grid'5000 deployable system images.</para></listitem>
</itemizedlist>
			<sect3 id="rsh">
				<title>rsh client</title>
				<para>
Kadeploy requires the usage of a legacy rsh client. This could be somewhat problematic because rsh is not installed by default  anymore in modern Linux distributions, although rsh responds at CLI (but it's a symbolic link pointing to ssh client). In debian-like systems, you have to install the package <emphasis>rsh-client</emphasis> to obtain the real rsh client.
				</para>
			</sect3>
			<sect3 id="dhcp">
				<title>DHCP</title>
				<para>
Because of nature of DHCP, it's rather difficult to have side by side 2 servers handling the same set of nodes but with different configuration. That's why nodes used during Kadeploy tests will be booted with the same DHCP as for production use.
				</para>				
			</sect3>
			<sect3 id="tftppxe">
				<title>TFTP and PXELinux</title>
				<para>
Because of <link linkend="dhcp">previous DHCP configuration</link>, the testing instance of Kadeploy will use the same TFTP server and therefore, the testing and production instances need to write PXE files at the same place. 
				</para>
				<para>
The steps to follow are :
				</para>
				
				<orderedlist>
					<listitem>
						<para>
Install a NFS server on frontend hosting TFTP service.
						</para>
					</listitem>
					<listitem>
						<para>
Make export root TFTP directory (cf <filename>/etc/exports</filename>) from this frontend.
						</para>
					</listitem>
					<listitem>
						<para>
On frontend-dev : import the previously exported root TFTP directory.
						</para>
					</listitem>
				</orderedlist>
				<para>

The PXE environment is usually set by the cluster sysadmin in accordance with the TFTP installation layout. PXE related files and directories are likely to be located under TFTP root directory (cf <filename>pxelinux.0</filename> bootloader and <filename>pxelinux.cfg</filename> directory containing the boot configuration for the nodes). If TFTP root directory is NFS-mounted by frontend-dev, it will have access to PXE ressources, too.
				</para>
			</sect3>
			<sect3 id="mysql">
				<title>MySQL database</title>
				<para>
<application>Kadeploy</application> needs an access as root and deploy user to a MySQL instance. Make sure your MySQL running server is reachable from frontend-dev using the MySQL root user. 
For instance, the following command should be working from frontend-dev : 
<programlisting>
	mysql -u root -p -h mysql.<![CDATA[<site>]]>.grid5000.fr
</programlisting>
				</para>
			</sect3>
			<sect3 id="images">
				<title>Grid'5000 images</title>
				<para>
Kadeploy needs a direct file-system access to deployable system images. The <filename>/grid5000</filename> directory have to be NFS mounted by fronted-dev.
				</para>
			</sect3>

		</sect2>
		<sect2 id="217install">
			<title>Kadeploy 2.1.7 installation</title>
			<para>
The frontend considered for this installation is <emphasis>frontend-dev</emphasis>.
			</para>
			<para>
Please follow the instructions below : 
			</para>
			<procedure>
				<step>
					<para>
Retrieve and unpack the tarball archive of Kadeploy 2.1.7 (<filename>kadeploy-2.1.7.tar.gz</filename>) into a safe location (e.g. your home directory).
					</para>
<programlisting>
cd <![CDATA[<path_to_unpack_kadeploy_archive>]]> <![CDATA[&&]]> tar -xvzf kadeploy-2.1.7.tar.gz
</programlisting>
					
				</step>
				<step>
					<para>
Edit the heading variables of <filename>Makefile</filename> located at the top of Kadeploy archive.
					</para>
					<substeps>
						<step>
							<para>
Especially, the following variables :
							</para>
							<itemizedlist>
								<listitem>
									<para>
<command>DISTRIB</command> : your distribution name. It sets an installation path for Perl library used by Kadeploy. Recognized distributions are : debian4 (Debian Etch 4.x), Fedora Core 4. Another distribution will set to default pathname. 
									</para>
								</listitem>
								<listitem>
									<para>
<command>PREFIX</command> : the PREFIX for installation pathnames.
									</para>
								</listitem>
							</itemizedlist>
						</step>
						<step>
							<para>
This variables may be of interest, too :
							</para>
							<itemizedlist>
								<listitem>
									<para>
<command>KADEPLOYCONFDIR</command> : where to place configuration files.
									</para>
								</listitem>
								<listitem>
									<para>
<command>KADEPLOYHOMEDIR</command> : where Kadeploy files are installed.
									</para>
								</listitem>
								<listitem>
									<para>
<command>DEPLOYUSER</command> and <command>DEPLOYGROUP</command> : username and groupname of the identity used by Kadeploy to perform his work (instead of using the super-privileged user <emphasis>root</emphasis>). The values <emphasis>deploy</emphasis> for both variables are set by default.
									</para>
								</listitem>
							</itemizedlist>
						</step>
					</substeps>
				</step>
				<step>
					<para>
Install Kadeploy by using the command as <emphasis>root</emphasis> : 
					</para>
<programlisting>
make kadeploy_install
</programlisting>
				</step>
				<step>
					<para>
Make sure that UID/GID used for the <replaceable>deploy</replaceable> user on frontend-dev are the same that those on frontend-prod. Otherwise, make changes accordingly on frontend-dev to get same UID/GID values on both machines. It's important for later file-system accesses 
					</para>
				</step>
				<step>
					<para>
Get TFTP root directory and Grid'5000 deployable images repository NFS mounted on frontend-dev.
					</para>
				</step>
				<step>
					<para>
Get your Kadeploy 2.1.7 configuration ready. A quick way to achieve this is to copy into the test kadeploy configuration directory all production configuration files and modify them. Some informations into this files will be needed by the next step.
					</para>
				</step>
				<step>
					<para>
Setup the Kadeploy database. The goal is to have side by side the production DB and the test DB. Informations will be sync from production to test DB to get the test DB initialized and working-ready. The command to interact with the Kadeploy DB is <command>kadatabase</command>. It will ask for several informations, as MySQL login and password, database names.
					</para>
					<substeps>
						<step>
							<para>
								Issue the following commands : 
							</para>
							<itemizedlist>
								<listitem>
									<para>
<command>kadatabase --create-db-deploy-217</command> : create a Kadeploy 2.1.7 empty database.
									</para>
								</listitem>
								<listitem>
									<para>
<command>kadatabase --add-deploy-db-user</command> : add the deploy DB user into the MySQL instance. This is the mysql user used by Kadeploy for getting access to his database. It may be different from the production deploy DB user.
									</para>
								</listitem>
								<listitem>
									<para>
<command>kadatabase --dup-production-db</command> : duplicate the production DB into the test DB. Both DB names will be asked during operation. After that, you will have a working-ready test DB.
									</para>
								</listitem>
								<listitem>
									<para>
<command>kadatabase --dup-deployment-rights</command> : duplicate deployment rights into test DB. To be used each time a OAR submission have been issued from the OAR frontend. It gives the test kadeploy rights to deploy on the reserved nodes.
									</para>
								</listitem>
							</itemizedlist>
						</step>
					</substeps>
				</step>
				<step>
					<para>
That's all folks !
					</para>
				</step>
			</procedure>
			<note>
					<itemizedlist>
						<listitem>
							<para>
Remember to issue kadeploy commands from frontend-dev when you want to test the 2.1.7 version.	
							</para>
						</listitem>
						<listitem>
							<para>
Remember to issue <command>kadatabase --dup-deployment-rights</command> each time you get a OAR reservation.
							</para>
						</listitem>

					</itemizedlist>
			</note>
		</sect2>
	</sect1>
	<sect1 id="migration">
		<title>How-to perform a migration from 2.1.6 to 2.1.7</title>
		<para>TODO.</para>
	</sect1>
</article>
