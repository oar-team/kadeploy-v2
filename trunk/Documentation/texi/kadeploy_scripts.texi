@ifclear full_documentation

@include version.texi

@ifnottex
@node Top
@top Customize scripts for Kadeploy @value{KADEPLOYVERSION}

This documentation is provided to document kadeploy specfic scripts.

@menu
* Customization scripts::
@end menu

@node Customization scripts
@chapter Customization scripts

@end ifnottex

@end ifclear


@menu
* Preinstallation script::
* Postinstallation script::
@end menu



@node Preinstallation script
@section Preinstallation script
@cindex preinstallation script

This script is common to all environments, its goal is to prepare the system to the hardware specification 
and the target hard disk drive for the deployment process. It can load a specific disk controler driver, tune
hard drive performances, create partitions and format some of them and make every kind of checks needed.
This script is defined in the configuration file as @option{pre_install_script} and the associated archive as 
@option{pre_install_archive} @ref{deploy.conf man}.

@subsection Preinstallation archive structure

The preinstallation archive is a gzipped tar archive, containing the @option{pre_install_script} in its root 
directory, this archive is decompressed in the @file{/rambin} directory at execution time, @emph{be carefull about that 
for adressing the files}.
A preinstallation template is provided in the @file{tools/preinstallation} directory, and the 
@file{tools/preinstallation/README.txt} file contains all the explanations to generate the 
preinstallation archive from the raw files.


@subsubsection @command{init.ash}
@cindex @command{init.ash}
@cindex preinstallation @command{init.ash}

In the given template, the first executed script, handles every step during the preinstallation:
@enumerate
@item reads the configuration file @file{/rambin/preinstall.conf}, specific to your cluster, to know everything for harddrive preparation
@item loads the required modules so that the deployment kernel can handle your harddrive efficiently, if some optimization has to be done, it should be done just after loading the modules
@item launches the script @file{/rambin/partition.ash} that creates the partitions on the harddrive and format them
@end enumerate

@example
@verbatiminclude ../../tools/preinstallation/init.ash
@end example


@subsubsection @command{partition.ash}
@cindex @command{partition.ash}
@cindex preinstallation @command{partition.ash}

In the given template, its role is to partition and format the harddrive according to your needs:
@enumerate
@item it checks if you required to partition the harddrive, if so, it applies a fdisk script, @file{/rambin/fdisk.txt}, to your harddrive
@item it formats all the shared partitions if requested:
@enumerate a
@item @file{swap} partition, with mkswap
@item @file{tmp} parition, with the selected filesystem
@end enumerate
@end enumerate
@*
@strong{Tips}
@itemize
@item Formatting the @file{tmp} partition can take a lot of time with the default @command{mkfs} options for your filesystem 
(more than 2 minutes 30 seconds with default options for a 60 Gb partition, while basic tuning provided in the template 
achieves the same task in less than 30 seconds).
@item @command{fdisk} program can change from one deployment kernel to the next one, and @emph{the syntax may differ}, so 
please check your preinstall if upgrading from kadeploy 2.1.2 to 2.1.5 or later: the only known difference is that for the last 
@option{d} directive, to delete the last partition, @command{fdisk} guesses its number in kadeploy 2.1.2 while you have to specify 
it later.
@end itemize

@example
@verbatiminclude ../../tools/preinstallation/partition.ash
@end example


@node Postinstallation script
@section Postinstallation script
@cindex postinstallation script

This script is associated to the environment to deploy. Its goal is to adapt the raw system content, transfered 
on the target partition during the transfert phase, to a bootable system. 
As the preinstallation script, it is a gzipped tar archive that contains all the configuration files and 
a launching script @file{traitement.ash} in the archive's root directory. This archive is sent to the nodes, 
decompressed and then the @option{post_install_script} is executed on every node. This script name is defined in 
the configuration file @file{deploy.conf} as @option{post_install_script} variable @ref{deploy.conf man}.

A postinstallation template is provided in the @file{tools/postinstallation} directory, and the 
@file{tools/postinstallation/README.txt} file contains all the explanations to generate the preinstallation 
archive from the raw files.


@subsection @command{traitement.ash}
@cindex @command{traitement.ash}
@cindex postinstallation @command{traitement.ash}

In the given template, the first executed script, handles every step during the postinstallation:
@enumerate
@item configures all the required variables during the postinstallation process: @var{TAR_REPOSITORY} and 
@var{DEST_DIR} thoses variables permit to deduce much more information later 
@item adapt the @file{/etc/fstab} on the deployed system, from a basic one containing all the shared partitions 
that should be mounted on the deployed system
@item adapt @command{ssh} configuration to your needs, and kadeploy:
@enumerate a
@item copy a set of @file{authorized_keys}, in @file{/root/.ssh} directory, this file should contain the 
administrators public keys and the public key of the @dfn{deploy} user, so that kadeploy can reboot the nodes 
with @command{ssh} without using password @footnote{if you choose to use @samp{ssh root@@node /sbin/reboot} as the @option{softboot} directive in @file{deploy_cmd.conf} @ref{deploy_cmd.conf man}}
@item copy the ssh host keys of the node, to ensure that after every deployment, the host keys are constant on 
the nodes
@end enumerate
@item adapt the deployed system to avoid some annoying interactive checks at boottime: this is pretty important 
that your system boots as fast as possible, and do not get stuck in a phase asking for a password
@end enumerate

@example
@verbatiminclude ../../tools/postinstallation/traitement.ash
@end example

@subsection adapting @file{fstab}
@cindex @command{fstab}

The @emph{modt important} step during postintallation, is to adapt the fstab on the deployed system, this is 
pretty important if you created your environment on a different partition than the target partition for deployment, 
or if you intend to deploy your environment on more than one partition on your target nodes.
To determine the root partition, you just have to figure out which device is mounted on the @file{/mnt/dest} mount 
point when the postinstallation phase is initiated, determining the filesystem allows you to fill all the 
information you need to adapt the full @file{/etc/fstab}.
You cannot guess additional information about the other partitions during postinstallation, so you should use a 
template containing all the remaining information: for @dfn{swap} and @file{/tmp} for example or any partition your system will need at boottime (maybe @file{/proc}, or a @dfn{tmpfs}?), it depends of your environment@footnote{that is why the postinstall is related to the environment}.

@example
@verbatiminclude ../../tools/postinstallation/fstab
@end example















