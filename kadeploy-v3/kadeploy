#!/usr/bin/ruby -w


require 'lib/debug'
require 'lib/checkrights'
require 'lib/nodes'
require 'lib/config'
require 'lib/managers'
require 'lib/stepdeployenv'
require 'lib/stepbroadcastenv'
require 'lib/stepbootnewenv'
require 'thread'

class KadeployWorkflow
  @thread_set_deployment_environment = nil
  @thread_broadcast_environment = nil
  @thread_boot_new_environment = nil 
  @thread_process_finished_nodes = nil
  @queue_manager = nil
  @output = nil
  @rights = nil
  @nodeset = nil
  @config = nil
  @window_manager = nil
  attr_accessor :nodes_ok
  attr_accessor :nodes_ko

  def initialize(config)
    @config = config
    @output = Debug::OutputControl.new(@config.common.debug_level)
    @rights = CheckRights::CheckRightsFactory.new(@config.common.rights_kind).klass
    @nodes_ok = Nodes::NodeSet.new
    @nodes_ko = Nodes::NodeSet.new
    @nodeset = @config.common.node_list
    @queue_manager = Managers::QueueManager.new(@config, @nodes_ok, @nodes_ko)
    @window_manager = Managers::WindowManager.new

    @thread_set_deployment_environment = Thread.new {
      launch_thread_for_macro_step("SetDeploymentEnv")
    }
    @thread_broadcast_environment = Thread.new {
      launch_thread_for_macro_step("BroadcastEnv")
    }
    @thread_boot_new_environment = Thread.new {
      launch_thread_for_macro_step("BootNewEnv")
    }
    @thread_process_finished_nodes = Thread.new {
      launch_thread_for_macro_step("ProcessFinishedNodes")
    }
  end
  
  def launch_thread_for_macro_step(kind)
    close_thread = false
    @output.debugl(4, "#{kind} thread launched")
    while (not close_thread) do
      nodes = @queue_manager.get_task(kind)
      #We receive the signal to exit
      if (nodes.kind_of?(Managers::MagicCookie)) then
        close_thread = true
      else
        if kind != "ProcessFinishedNodes" then
          nodes.group_by_cluster.each_pair { |cluster, set|
            macro_step_instance = @config.cluster_specific[cluster].get_macro_step(kind).get_instance
            case kind
            when "SetDeploymentEnv"
              SetDeploymentEnvironnment::SetDeploymentEnvFactory.new(macro_step_instance[0], 
                                                                     macro_step_instance[1],
                                                                     cluster,
                                                                     set,
                                                                     @queue_manager,
                                                                     @window_manager,
                                                                     @output).klass.run
            when "BroadcastEnv"
              BroadcastEnvironment::BroadcastEnvFactory.new(macro_step_instance[0], 
                                                            macro_step_instance[1], 
                                                            cluster,
                                                            set,
                                                            @queue_manager,
                                                            @window_manager,
                                                            @output).klass.run
            when "BootNewEnv"
              BootNewEnvironment::BootNewEnvFactory.new(macro_step_instance[0], 
                                                        macro_step_instance[1], 
                                                        cluster,
                                                        set,
                                                        @queue_manager,
                                                        @window_manager,
                                                        @output).klass.run
            else
              raise "Invalid macro step name"
            end
          }
        else
          #in this case, all is ok
          if not nodes.empty? then
            @nodes_ok.add(nodes)
          end
          if @queue_manager.one_last_active_thread? then
            @nodes_ok.group_by_cluster.each_pair { |cluster, set|
              puts "Nodes correctly deployed on cluster #{cluster}"
              puts set.to_s
            }
            @nodes_ko.group_by_cluster.each_pair { |cluster, set|
              puts "Nodes not Correctly deployed on cluster #{cluster}"
              puts set.to_s(true)
            }
            @queue_manager.send_exit_signal
            @thread_set_deployment_environment.join
            @thread_broadcast_environment.join
            @thread_boot_new_environment.join
          end
        end
      end
    end
  end

  def run
    puts "Launching Kadeploy ..."
    if (@rights.granted? == true)
      @queue_manager.next_macro_step(nil, @nodeset)
      @thread_process_finished_nodes.join
    else
      puts "You do not have the deployment rights on all the nodes"
    end
  end
end

Signal.trap("INT") do
  puts "SIGINT trapped, let's clean everything ..."
  #todo: clean some stuff
  exit 1
end

config = ConfigInformation::Config.new
if (config.load_cmdline_options == true)
  workflow=KadeployWorkflow.new(config)
  workflow.run
end
