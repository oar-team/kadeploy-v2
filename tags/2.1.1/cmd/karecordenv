#!/usr/bin/perl

# karecordenv registers (but does not create) 
# an existing environment archive

use Getopt::Long;
use libkadeploy2::deploy_iolib;
use libkadeploy2::conflib;
#use libkadeploy2::envlib qw(init_env get_env is_env dump_env);
use libkadeploy2::envlib;
use libkadeploy2::node_bd;
use libkadeploy2::nodes;
use libkadeploy2::hexlib;
use strict;
use warnings;

sub get_unixuser();

if (!@ARGV){
    print "
Usage : karecordenv\n
\t-n  | --name        environmentname
\t-v  | --version     version              (default is 1)
\t-d  | --description description
\t-a  | --author      author email
\t-fb | --filebase    environment image path
\t-ft | --filesite    post-installation file path
\t-s  | --size        size (Mo)
\t-i  | --initrdpath  inirdpath
\t-k  | --kernelpath  kernel path
\t-p  | --param       kernel param
\t-fd | --fdisktype   fdisk type           (default is 82)
\t-fs | --filesystem  file system          (default is ext2)
\t-o  | --optsupport  optimisation support (default is 0)\n
Name, kernel path, environment image path and post-installation file path must be defined\n";
    exit 0;
}

#declares option variables and sets default values
my $name;
my $version=1;
my $description="none";
my $author="@";
my $filebase_path;
my $filesite_path;
my $size=0;
my $initrd_path;
my $kernel_path;
my $kernel_param;
my $fdisk_type;
my $file_system="ext2";
my $file_environment;
my $optsupport=0;

my $successful = 0;

# gets the options
GetOptions('n=s' => \$name,
	   'name=s' => \$name,
           'v=i' => \$version,
	   'version=i' => \$version,
           'd=s' => \$description,
	   'description=s' => \$description,
           'a=s' => \$author,
	   'author=s' => \$author,
           's=i' => \$size,
	   'size=i' => \$size,
	   'i=s' => \$initrd_path,
	   'initrdpath=s' => \$initrd_path,
           'k=s' => \$kernel_path,
	   'kernelpath=s' => \$kernel_path,
           'p=s' => \$kernel_param,
	   'kernelparam=s' => \$kernel_param,
           'fb=s' => \$filebase_path,
	   'filebase=s' => \$filebase_path,
           'ft=s' => \$filesite_path,
	   'filesite=s' => \$filesite_path,
           'fd=s' => \$fdisk_type,
	   'fdisktype=s' => \$fdisk_type,
           'fs=s' => \$file_system,
	   'filesystem=s' => \$file_system,
	   'fe=s' => \$file_environment,
	   'file_environment=s' => \$file_environment,
	   'optsupport=s' => \$optsupport,
	   'o=s'          => \$optsupport,
	   );

## open file environment description
if ($file_environment) {
 	envlib::init_env ($file_environment);
	 if (!$name) {$name = envlib::get_env("name") if envlib::get_env("name");}
	$version = envlib::get_env("version") if envlib::get_env("version");
	$description = envlib::get_env("description") if envlib::get_env("description");
	$author= envlib::get_env("author") if envlib::get_env("author");
	$size= envlib::get_env("size") if envlib::get_env("size");
	$initrd_path= envlib::get_env("initrdpath") if envlib::get_env("initrdpath");
	$kernel_path= envlib::get_env("kernelpath") if envlib::get_env("kernelpath");
	$kernel_param= envlib::get_env("kernelparam") if envlib::get_env("kernelparam");
	$filebase_path= envlib::get_env("filebase") if envlib::get_env("filebase");
	$filesite_path= envlib::get_env("filesite") if envlib::get_env("filesite");
	$fdisk_type= envlib::get_env("fdisktype") if envlib::get_env("fdisktype");
	$file_system= envlib::get_env("filesystem") if envlib::get_env("filesystem");
##	envlib::dump_env ();
}	
## performs checks
if(!$name){
    print "ERROR : you must defined a name for the environment to be registred\n";
    exit 0;
}
if(!$kernel_path){
    print "ERROR : kernel path must be defined\n";
    exit 0;
}
if(!$filebase_path){
    print "ERROR : path to environment image must be defined\n";
    exit 0;
}
if(!$filesite_path){
    print "ERROR : path to specialisation file must be defined\n";
    exit 0;
}
if($version < 1){
    print "ERROR : version number must be >= 1";
    exit 0;
}

if (!$fdisk_type)
{
    print "Warning : using linux partition type : 83\n";
    $fdisk_type=131;    
}
else
{
    $fdisk_type=libkadeploy2::hexlib::unhexalize($fdisk_type);
}



# ajouter des vérifs sur l'existence des fichiers filebase et filesite?

## modification for database registration
# je serais tenté de faire des modifs sur filebase et filesite pour ajouter file:/ au début du path par exemple mais comment gérer ensuite le cas des url:/ par la suite... pour le moment considérons que l'utilisateur rentre le path avec le file:/

## registers the environment
my $base = libkadeploy2::deploy_iolib::connect();
	
$successful =  libkadeploy2::deploy_iolib::add_environment($base,$name,$version,$description,$author,$filebase_path,$filesite_path,$size,$initrd_path,$kernel_path,$kernel_param,$fdisk_type,$file_system,"1",$optsupport,get_unixuser());

libkadeploy2::deploy_iolib::disconnect($base);

if ($successful){
    print "Environment registration successfully completed.\n";
}else{
    print "ERROR : environment registration failed\n";
}

1;

#Retun username 
#depend of getent
sub get_unixuser()
{
    my $line;
    my $user;
    open(FD,"printenv|");
    while ($line=<FD>)
    {
	if ($line=~/^USER=(.+)$/)
	{
	    $user=$1;
	}
    }
    return $user;
}
