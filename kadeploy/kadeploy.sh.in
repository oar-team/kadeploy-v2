#!/usr/bin/env bash

UNAME=`uname`
case $UNAME in
        "Linux") HOST=`hostname -f`;;
        "SunOS") HOST=`hostname`;;
        *) HOST=`hostname -f`;;
esac

INSTALL_DIR=@prefix@/lib/erlang/
ERL=@ERL@
VERSION=@PACKAGE_VERSION@
NAMETYPE="-name"

CLIENTNAME=kadeploy_client_$RANDOM
NAME=kadeploy
SERVERHOST=$HOST
SERVERNAME="kadeploy-server@$SERVERHOST"

KADEPLOYPATH=$INSTALL_DIR/lib/$NAME-$VERSION/ebin

CONF_OPT_FILE="/etc/kadeploy/kadeploy.conf"
BOOT_OPT="-boot $INSTALL_DIR/lib/$NAME-$VERSION/priv/$NAME -boot_var KADEPLOYPATH  $INSTALL_DIR "
DEBUG_LEVEL=5
ERL_RSH=" -rsh ssh "
ERL_OPTS=" -smp auto +P 250000 +A 16 +K true @ERL_OPTS@ "
COOKIE='kadeploy'
ERTS_RUN=`$ERL -version 2>&1 | tr -cd 0123456789.`
ERTS_BOOT=`grep erts $KADEPLOYPATH/../priv/$NAME.rel | tr -cd 0123456789.`
OPTIONS="default"
# 20mn default timeout
TIMEOUT=1200

start() {
    $ERL $ERL_OPTS $ERL_RSH -noinput -noshell $NAMETYPE $CLIENTNAME -setcookie $COOKIE \
    -pa $KADEPLOYPATH -run kadeploy_mgr deploy $SERVERNAME $USER $NODEFILE \
        $ENV $OPTIONS
    RET=$?
    if [ "$RET" > 0 ]; then
        exit $RET
    else
        if [ ! "XX$SCRIPT" = "XX" ]; then
            exec $SCRIPT
        fi
    fi
}

debug() {
    $ERL $ERL_OPTS $ERL_RSH $NAMETYPE $CLIENTNAME -setcookie $COOKIE \
    -pa $KADEPLOYPATH -run kadeploy_mgr deploy $SERVERNAME $USER $NODEFILE \
        $ENV $OPTIONS
}

version() {
    echo "Kadeploy version $VERSION"
}

check() {
    if [ "XX$NODEFILE" = "XX" ]; then
        echo "No nodefile, abort"
        exit 1
    fi
    if [ "XX$ENV" = "XX" ]; then
        echo "No environment, abort"
        exit 1
    fi
}

usage() {
    prog=`basename $0`
    echo "Use : kadeploy
 [-m | --machine     hostname]
 [-f | --file        node_file]                 Choose -m XOR -f
 [-e | --environment environment_name]
 [-d | --device   device]
 [-p | --partition   partition]
 [-h | --help]                                  This help message
 [-k | --keys]                                  Add ssh keys at the end of the deployment
 [-M ]               minnodes                   Minimum number of nodes to wait for
 [-D | --debug-level level]                     4 : show all ...  0 : hide all
 [-r | --reformat-tmp]                          Re-format the /tmp partition
 [-F | --fast-kernel-reboot]                    Use kexec to reboot quickly (only works with Linux env)
 [-u | --use-prod-env]                          Use the production environment to deploy
 [-s | --script      script]                    Launch a script after a deployment
"
    exit
}

while getopts "m:f:e:d:p:k:M:D:rFustvah" Option
do
    case $Option in
        m)  echo "-m: not yet implemented"
            exit 1 ;;
        f) NODEFILE=$OPTARG;;
        e) ENV=" recorded $OPTARG ";;
        d) ENV=" anonymous $OPTARG ";;
        p) OPTIONS="partition:$OPTARG;$OPTIONS";;
        k) KEYFILE=$OPTARG
            echo "-k: not yet implmented"
            exit 1;;
        M) OPTIONS="minnodes:$OPTARG;$OPTIONS" ;;
        D) DEBUG_LEVEL=$OPTARG;;
        r) OPTIONS="clean_tmp:true;$OPTIONS";;
        F) OPTIONS="last_boot:kexec;$OPTIONS" ;;
        u) OPTIONS="method:prod_env;$OPTIONS" ;;
        s) SCRIPT=$OPTARG;;
        t) OPTIONS="timeout:$OPTARG;$OPTIONS";;
        v) version;;
        a) ATTACH_BEAM=1;;
        *) usage ;;
    esac
done
shift $(($OPTIND - 1))

check
if [ "XX$ATTACH_BEAM" = "XX1" ]; then
    debug
fi
start
